[
    {
        "id": "be3e27186d28303f",
        "type": "tab",
        "label": "HVAC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "93179891422343ce",
        "type": "group",
        "z": "be3e27186d28303f",
        "name": "Overnight",
        "style": {
            "stroke": "#92d04f",
            "label": true,
            "color": "#777777"
        },
        "nodes": [
            "1c9bcb5cf292a280",
            "203601c906abe849",
            "0a951763add3f38d",
            "b3e66aa9ffaabf49",
            "0d15d0481a6c2694",
            "abdb30aac88e76a5",
            "c2c2e3984afaf72d",
            "72100d81b7f650dd",
            "6c8ac1b15d8f7e67",
            "f17b0c3fcbc3154e",
            "d826acdf1e1ba8f2"
        ],
        "x": 14,
        "y": 1679,
        "w": 772,
        "h": 262
    },
    {
        "id": "88eac444130cc4b9",
        "type": "group",
        "z": "be3e27186d28303f",
        "name": "Evening",
        "style": {
            "stroke": "#92d04f",
            "label": true,
            "color": "#777777"
        },
        "nodes": [
            "a142daeb57508c72",
            "942d462647f8f351",
            "659e2b0dde59d64c",
            "eae87edf8c80725a",
            "2b7986b72cd82ac4",
            "12d1c8df2180e3c9",
            "23281c2da3127845",
            "08a459d3dc681aa8",
            "fbd159a53285e055",
            "3db68f09ef6f7942",
            "9875149c9456a05f"
        ],
        "x": 14,
        "y": 1399,
        "w": 772,
        "h": 262
    },
    {
        "id": "455fd4c30a49e396",
        "type": "group",
        "z": "be3e27186d28303f",
        "name": "Afternoon",
        "style": {
            "stroke": "#92d04f",
            "label": true,
            "color": "#777777"
        },
        "nodes": [
            "811245f12c49b57d",
            "93d7a9715a7fe597",
            "d3f1758e43b0e30c",
            "ad8814bcfd9ee367",
            "142b0c7cbe552a48",
            "56f415bb57141d28",
            "c9667dfa061f2ad7",
            "32b7744d17953b3d",
            "18d514c906049a1f",
            "58ddf1d5ffc30c5d",
            "28e457fa2d3796d4",
            "eded57b624d43fcd",
            "e0977f3a7fe806d9",
            "0aa3ca4e617d5e13",
            "d27cace53f391fd2",
            "f138fcbdf4c1cd27",
            "5e80b36597ea79ea",
            "ac2705b10f511fab",
            "85ca140338eae407",
            "2199b9956cf88c7c",
            "4f61c236c3447fd0"
        ],
        "x": 14,
        "y": 879,
        "w": 772,
        "h": 502
    },
    {
        "id": "0f892b13d05060a0",
        "type": "group",
        "z": "be3e27186d28303f",
        "name": "Morning",
        "style": {
            "stroke": "#92d04f",
            "label": true,
            "color": "#777777"
        },
        "nodes": [
            "785ecdac379a465c",
            "9cdd1dee8fec4cc2",
            "f135528fe421688b",
            "9695557a0779ea62",
            "7039f712a78cb4f3",
            "7c95cc12e1c09f78",
            "89f5fafa7e94f2b4",
            "2d426cc4d984c9b1",
            "fa1e48520c94cb3a",
            "3d9640479a0d3da0",
            "4862f41e8ae32306",
            "b45e4b1ebfa8e478",
            "2718b59482795a39",
            "136b110bca130798",
            "9a906b3960c19760",
            "9732b2a5b51821d2",
            "4fe5673510673f0e",
            "ffb0e9a0e3b48819",
            "7e311d73c60d8abe",
            "c1d53d97503f75d3",
            "a7a2f5a0bf71de87"
        ],
        "x": 14,
        "y": 379,
        "w": 772,
        "h": 482
    },
    {
        "id": "ca220799c4f3ae38",
        "type": "group",
        "z": "be3e27186d28303f",
        "name": "Early",
        "style": {
            "stroke": "#92d04f",
            "fill-opacity": "0.65",
            "label": true,
            "color": "#777777"
        },
        "nodes": [
            "43a168d4cfe3abb8",
            "10e61e701c1a9308",
            "139ee6cb1cf79380",
            "0970c1a30e515bc9",
            "36c8e1ab2245d19c",
            "f5e8fc39d7b8cef9",
            "f617a0a3d216757f",
            "aee7c4a0efaf2319",
            "77a434fa9452dd50",
            "7c0aaec419b46186",
            "0c8b516670a4a57f"
        ],
        "x": 4,
        "y": 99,
        "w": 782,
        "h": 262
    },
    {
        "id": "9afddc3717fe5ad5",
        "type": "group",
        "z": "be3e27186d28303f",
        "name": "Den",
        "style": {
            "stroke": "#ff0000",
            "label": true
        },
        "nodes": [
            "8a99d798455efb01",
            "20d66d385ecf4031",
            "b6f91fb1a2fcdf5f",
            "f4264a53af48da24",
            "c98919621378d97e",
            "0d99ac106afc3370",
            "a451b841995aaea7",
            "3046d96a7da6b48c",
            "4b1adef13659a409",
            "78da8acd302aedcc",
            "3bc581866c40607c",
            "142ea8b5a0298979",
            "c824e994237ea892",
            "69879f143da93e8b",
            "d6342d3f9dfea3fa",
            "336c7c4d0ff665ae",
            "91a338f6812b98f2",
            "c262dcb8ab6e85c4",
            "6e0865c18cedb6ad",
            "ca693203203d60de",
            "9dd68ff7481787c1",
            "b361a414c3257c5c",
            "af9e78b3713be8b6",
            "4cd20496d2e93d13",
            "507df67b155ba061"
        ],
        "x": 868,
        "y": 205.5,
        "w": 2258,
        "h": 355.5
    },
    {
        "id": "4ebec636418bb53e",
        "type": "group",
        "z": "be3e27186d28303f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8f1425c795b04be3",
            "4c083524e8aada63",
            "95e6f1f3555cd8a4"
        ],
        "x": 934,
        "y": 39,
        "w": 652,
        "h": 82
    },
    {
        "id": "72943fd661f0b29f",
        "type": "group",
        "z": "be3e27186d28303f",
        "name": "Bedroom",
        "style": {
            "stroke": "#ff0000",
            "label": true
        },
        "nodes": [
            "3aa154924b11b8de",
            "560bce0c9b560887",
            "5ea3f1b845d043db",
            "c5dc09fa515bf2a0",
            "8402a4a5140ce140",
            "6ab90a65a4bdfb52",
            "7260d0de38036064",
            "ad22893f29cab122",
            "6de37a7250b2e6b1",
            "79b122a64f2a954b",
            "98aab72b918f1553",
            "4938635dcb977174",
            "74ae62488aebfb9f",
            "988f17e67e385388",
            "a596be957f21867f",
            "d24b1067570cdb08",
            "aeca61192b9839f4",
            "238cc5d38791d2f5",
            "18b08e213ac9d99d",
            "f0f8e417c3b9c3db",
            "0b4388fe437dbc83",
            "cb2a1e81e83b0b7c",
            "6b0bc5b5206f96de",
            "a03662dde0a1aa27"
        ],
        "x": 868,
        "y": 585.5,
        "w": 2258,
        "h": 355.5
    },
    {
        "id": "885be63c3fc1264b",
        "type": "group",
        "z": "be3e27186d28303f",
        "name": "Office",
        "style": {
            "stroke": "#ff0000",
            "label": true
        },
        "nodes": [
            "b63974e2eeb8ae66",
            "b3ff11d19935a2ac",
            "a809b2fa8c4ceb08",
            "8dd45a924ce3d247",
            "45c29a4ba59124d6",
            "263a3faad4e06189",
            "edfdb23e02c20555",
            "484297fd9a4a2a71",
            "20df73c7ed9e5d36",
            "46ff870ed5946bf7",
            "dc4a9e7a35f215d4",
            "fa7b9e582a8c3516",
            "c54928fea436269a",
            "b7d9c0e39839d391",
            "e92595fc488a60b1",
            "7ea39302956ec4d7",
            "033fd0686cb076fb",
            "a6dd9f12343379cd",
            "96bc10d3c19cfa69",
            "a9d2c5b76e18e528",
            "28e9c28352f9d7e2",
            "4727c0ec8548202c",
            "1d0142f3767176db",
            "aa875eff5aee1f20"
        ],
        "x": 868,
        "y": 965.5,
        "w": 2258,
        "h": 355.5
    },
    {
        "id": "0d99ac106afc3370",
        "type": "group",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "Hold",
        "style": {
            "stroke": "#ffff3f",
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "6f03d860c08b8d36",
            "713fdb46ea13fded",
            "6b72a1a6ab5dc524",
            "4ff81acea4744f9e",
            "4e1f4de21111bd6a",
            "dbc205ac8904383d",
            "eb922506373acabc",
            "9832e24edeecba94",
            "d7a5dc8647b7a6ad",
            "e5aad772454507ab"
        ],
        "x": 894,
        "y": 231.5,
        "w": 1112,
        "h": 149.5
    },
    {
        "id": "8402a4a5140ce140",
        "type": "group",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "Hold",
        "style": {
            "stroke": "#ffff3f",
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "fe827766f2deb360",
            "7f20cf59c5600f7a",
            "6c23698430a98ad4",
            "d1a453bbf51a4337",
            "e25b6451879da94d",
            "f81278da560d486e",
            "921379db2c9d47b7",
            "0a2efea844b4a1eb",
            "eafbd16e4ef3fc30",
            "124ecbe9711473de",
            "c510a0d482bbd544"
        ],
        "x": 894,
        "y": 611.5,
        "w": 1112,
        "h": 149.5
    },
    {
        "id": "8dd45a924ce3d247",
        "type": "group",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "Hold",
        "style": {
            "stroke": "#ffff3f",
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "307f9c925b498375",
            "be67395f244b53cd",
            "5ede15c2f8fa649e",
            "302da9b3705febe3",
            "dfd93c60a8c62570",
            "5171f137b86455f6",
            "e02684c8adf67bba",
            "f239ef16f8e42b8b",
            "bd7b16fd5744aba1",
            "4409ee8c9888c248",
            "5c7cc42cea5a3bb5"
        ],
        "x": 894,
        "y": 991.5,
        "w": 1112,
        "h": 149.5
    },
    {
        "id": "72100d81b7f650dd",
        "type": "junction",
        "z": "be3e27186d28303f",
        "g": "93179891422343ce",
        "x": 280,
        "y": 1720,
        "wires": [
            [
                "0a951763add3f38d",
                "c2c2e3984afaf72d",
                "abdb30aac88e76a5"
            ]
        ]
    },
    {
        "id": "aee7c4a0efaf2319",
        "type": "junction",
        "z": "be3e27186d28303f",
        "g": "ca220799c4f3ae38",
        "x": 280,
        "y": 140,
        "wires": [
            [
                "139ee6cb1cf79380",
                "f5e8fc39d7b8cef9",
                "f617a0a3d216757f"
            ]
        ]
    },
    {
        "id": "fa1e48520c94cb3a",
        "type": "junction",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "x": 280,
        "y": 420,
        "wires": [
            [
                "7c95cc12e1c09f78",
                "b45e4b1ebfa8e478",
                "ffb0e9a0e3b48819"
            ]
        ]
    },
    {
        "id": "ad8814bcfd9ee367",
        "type": "junction",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "x": 260,
        "y": 920,
        "wires": [
            [
                "142b0c7cbe552a48",
                "18d514c906049a1f",
                "ac2705b10f511fab"
            ]
        ]
    },
    {
        "id": "08a459d3dc681aa8",
        "type": "junction",
        "z": "be3e27186d28303f",
        "g": "88eac444130cc4b9",
        "x": 280,
        "y": 1440,
        "wires": [
            [
                "23281c2da3127845",
                "942d462647f8f351",
                "12d1c8df2180e3c9"
            ]
        ]
    },
    {
        "id": "ffb0e9a0e3b48819",
        "type": "junction",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "x": 320,
        "y": 680,
        "wires": [
            [
                "4fe5673510673f0e",
                "9732b2a5b51821d2"
            ]
        ]
    },
    {
        "id": "ac2705b10f511fab",
        "type": "junction",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "x": 320,
        "y": 1180,
        "wires": [
            [
                "eded57b624d43fcd",
                "e0977f3a7fe806d9"
            ]
        ]
    },
    {
        "id": "bddaf74f8742f712",
        "type": "junction",
        "z": "be3e27186d28303f",
        "x": 220,
        "y": 40,
        "wires": [
            [
                "ec94ea13c5ba85be"
            ]
        ]
    },
    {
        "id": "d7a5dc8647b7a6ad",
        "type": "junction",
        "z": "be3e27186d28303f",
        "g": "0d99ac106afc3370",
        "x": 1160,
        "y": 340,
        "wires": [
            [
                "e5aad772454507ab"
            ]
        ]
    },
    {
        "id": "eafbd16e4ef3fc30",
        "type": "junction",
        "z": "be3e27186d28303f",
        "g": "8402a4a5140ce140",
        "x": 1160,
        "y": 720,
        "wires": [
            [
                "c510a0d482bbd544"
            ]
        ]
    },
    {
        "id": "bd7b16fd5744aba1",
        "type": "junction",
        "z": "be3e27186d28303f",
        "g": "8dd45a924ce3d247",
        "x": 1160,
        "y": 1100,
        "wires": [
            [
                "5c7cc42cea5a3bb5"
            ]
        ]
    },
    {
        "id": "785ecdac379a465c",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "Den Morning Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": false,
        "entityId": "input_number.mc_heating_temperature_morning_den",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 130,
        "y": 480,
        "wires": [
            [
                "f135528fe421688b"
            ]
        ]
    },
    {
        "id": "9cdd1dee8fec4cc2",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "TOD - morning",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "60",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "binary_sensor.tod_morning",
        "stateType": "habool",
        "ifState": "true",
        "ifStateType": "bool",
        "ifStateOperator": "is",
        "outputs": 2,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "result",
                "valueType": "str"
            }
        ],
        "x": 120,
        "y": 420,
        "wires": [
            [
                "fa1e48520c94cb3a"
            ],
            [
                "fa1e48520c94cb3a"
            ]
        ]
    },
    {
        "id": "b0c2cccbc6211648",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "name": "WFH Today",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "60",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": false,
        "entityId": "input_boolean.working_from_home_today",
        "stateType": "habool",
        "ifState": "true",
        "ifStateType": "bool",
        "ifStateOperator": "is",
        "outputs": 2,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 90,
        "y": 40,
        "wires": [
            [
                "bddaf74f8742f712"
            ],
            [
                "bddaf74f8742f712"
            ]
        ]
    },
    {
        "id": "1c9bcb5cf292a280",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "93179891422343ce",
        "name": "TOD - Overnight",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "60",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "binary_sensor.tod_overnight",
        "stateType": "habool",
        "ifState": "true",
        "ifStateType": "bool",
        "ifStateOperator": "is",
        "outputs": 2,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "result",
                "valueType": "str"
            }
        ],
        "x": 120,
        "y": 1720,
        "wires": [
            [
                "72100d81b7f650dd"
            ],
            [
                "72100d81b7f650dd"
            ]
        ]
    },
    {
        "id": "659e2b0dde59d64c",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "88eac444130cc4b9",
        "name": "TOD - Evening",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "60",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "binary_sensor.tod_evening",
        "stateType": "habool",
        "ifState": "true",
        "ifStateType": "bool",
        "ifStateOperator": "is",
        "outputs": 2,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "result",
                "valueType": "str"
            }
        ],
        "x": 120,
        "y": 1440,
        "wires": [
            [
                "08a459d3dc681aa8"
            ],
            [
                "08a459d3dc681aa8"
            ]
        ]
    },
    {
        "id": "811245f12c49b57d",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "TOD - Afternoon",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "60",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "binary_sensor.tod_afternoon",
        "stateType": "habool",
        "ifState": "true",
        "ifStateType": "bool",
        "ifStateOperator": "is",
        "outputs": 2,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "result",
                "valueType": "str"
            }
        ],
        "x": 120,
        "y": 920,
        "wires": [
            [
                "ad8814bcfd9ee367"
            ],
            [
                "ad8814bcfd9ee367"
            ]
        ]
    },
    {
        "id": "43a168d4cfe3abb8",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "ca220799c4f3ae38",
        "name": "TOD - Early Morning",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "60",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "binary_sensor.tod_earlymorning",
        "stateType": "habool",
        "ifState": "true",
        "ifStateType": "bool",
        "ifStateOperator": "is",
        "outputs": 2,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "result",
                "valueType": "str"
            }
        ],
        "x": 130,
        "y": 140,
        "wires": [
            [
                "aee7c4a0efaf2319"
            ],
            [
                "aee7c4a0efaf2319"
            ]
        ]
    },
    {
        "id": "93d7a9715a7fe597",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "Den Afternoon Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "input_number.mc_heating_temperature_afternoon_den",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 130,
        "y": 980,
        "wires": [
            [
                "58ddf1d5ffc30c5d"
            ]
        ]
    },
    {
        "id": "a142daeb57508c72",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "88eac444130cc4b9",
        "name": "Office Evening Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "input_number.mc_heating_temperature_evening_office",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 130,
        "y": 1620,
        "wires": [
            [
                "23281c2da3127845"
            ]
        ]
    },
    {
        "id": "203601c906abe849",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "93179891422343ce",
        "name": "Den Overnight Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": false,
        "entityId": "input_number.mc_heating_temperature_overnight_den",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "off",
                "valueType": "str"
            }
        ],
        "x": 130,
        "y": 1780,
        "wires": [
            [
                "0a951763add3f38d"
            ]
        ]
    },
    {
        "id": "0a951763add3f38d",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "93179891422343ce",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 1780,
        "wires": [
            [
                "6c8ac1b15d8f7e67"
            ]
        ]
    },
    {
        "id": "9732b2a5b51821d2",
        "type": "BooleanLogicUltimate",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "",
        "payloadPropName": "payload",
        "filtertrue": "both",
        "persist": false,
        "sInitializeWith": "WaitForPayload",
        "triggertopic": "trigger",
        "outputtriggeredby": "all",
        "inputCount": "2",
        "topic": "result",
        "restrictinputevaluation": true,
        "delayEvaluation": 0,
        "translatorConfig": "84af4bac6aaf91ab",
        "x": 430,
        "y": 640,
        "wires": [
            [
                "2d426cc4d984c9b1"
            ],
            [],
            []
        ]
    },
    {
        "id": "139ee6cb1cf79380",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "ca220799c4f3ae38",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 200,
        "wires": [
            [
                "77a434fa9452dd50"
            ]
        ]
    },
    {
        "id": "f135528fe421688b",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 480,
        "wires": [
            [
                "c1d53d97503f75d3"
            ]
        ]
    },
    {
        "id": "d3f1758e43b0e30c",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 1040,
        "wires": [
            [
                "85ca140338eae407"
            ]
        ]
    },
    {
        "id": "942d462647f8f351",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "88eac444130cc4b9",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 1500,
        "wires": [
            [
                "fbd159a53285e055"
            ]
        ]
    },
    {
        "id": "10e61e701c1a9308",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "ca220799c4f3ae38",
        "name": "Bedroom Early Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "input_number.mc_heating_temperature_early_morning_bedroom",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 140,
        "y": 260,
        "wires": [
            [
                "f5e8fc39d7b8cef9"
            ]
        ]
    },
    {
        "id": "b3e66aa9ffaabf49",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "93179891422343ce",
        "name": "Bedroom Overnight Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": false,
        "entityId": "input_number.mc_heating_temperature_overnight_bedroom",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "off",
                "valueType": "str"
            }
        ],
        "x": 150,
        "y": 1840,
        "wires": [
            [
                "c2c2e3984afaf72d"
            ]
        ]
    },
    {
        "id": "0d15d0481a6c2694",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "93179891422343ce",
        "name": "Office Overnight Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": false,
        "entityId": "input_number.mc_heating_temperature_overnight_office",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "off",
                "valueType": "str"
            }
        ],
        "x": 140,
        "y": 1900,
        "wires": [
            [
                "abdb30aac88e76a5"
            ]
        ]
    },
    {
        "id": "eae87edf8c80725a",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "88eac444130cc4b9",
        "name": "Bedroom Evening Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "input_number.mc_heating_temperature_evening_bedroom",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 140,
        "y": 1560,
        "wires": [
            [
                "12d1c8df2180e3c9"
            ]
        ]
    },
    {
        "id": "2b7986b72cd82ac4",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "88eac444130cc4b9",
        "name": "Den Evening Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "input_number.mc_heating_temperature_evening_den",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 130,
        "y": 1500,
        "wires": [
            [
                "942d462647f8f351"
            ]
        ]
    },
    {
        "id": "12d1c8df2180e3c9",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "88eac444130cc4b9",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 1560,
        "wires": [
            [
                "3db68f09ef6f7942"
            ]
        ]
    },
    {
        "id": "23281c2da3127845",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "88eac444130cc4b9",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 1620,
        "wires": [
            [
                "9875149c9456a05f"
            ]
        ]
    },
    {
        "id": "ec94ea13c5ba85be",
        "type": "link out",
        "z": "be3e27186d28303f",
        "name": "WFH",
        "mode": "link",
        "links": [
            "9695557a0779ea62",
            "1ec7c26e2378e3aa",
            "6f99552fe550dbd6",
            "d27cace53f391fd2"
        ],
        "x": 265,
        "y": 40,
        "wires": []
    },
    {
        "id": "9695557a0779ea62",
        "type": "link in",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "WFH in",
        "links": [
            "ec94ea13c5ba85be"
        ],
        "x": 55,
        "y": 660,
        "wires": [
            [
                "9732b2a5b51821d2",
                "9a906b3960c19760"
            ]
        ]
    },
    {
        "id": "abdb30aac88e76a5",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "93179891422343ce",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 1900,
        "wires": [
            [
                "d826acdf1e1ba8f2"
            ]
        ]
    },
    {
        "id": "c2c2e3984afaf72d",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "93179891422343ce",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 1840,
        "wires": [
            [
                "f17b0c3fcbc3154e"
            ]
        ]
    },
    {
        "id": "0970c1a30e515bc9",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "ca220799c4f3ae38",
        "name": "Office Early Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": false,
        "entityId": "input_number.mc_heating_temperature_early_morning_office",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 120,
        "y": 320,
        "wires": [
            [
                "f617a0a3d216757f"
            ]
        ]
    },
    {
        "id": "36c8e1ab2245d19c",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "ca220799c4f3ae38",
        "name": "Den Early Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "input_number.mc_heating_temperature_early_morning_den",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 120,
        "y": 200,
        "wires": [
            [
                "139ee6cb1cf79380"
            ]
        ]
    },
    {
        "id": "f5e8fc39d7b8cef9",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "ca220799c4f3ae38",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 260,
        "wires": [
            [
                "7c0aaec419b46186"
            ]
        ]
    },
    {
        "id": "f617a0a3d216757f",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "ca220799c4f3ae38",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 320,
        "wires": [
            [
                "0c8b516670a4a57f"
            ]
        ]
    },
    {
        "id": "7039f712a78cb4f3",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "Bedroom Morning Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": false,
        "entityId": "input_number.mc_heating_temperature_morning_bedroom",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 150,
        "y": 600,
        "wires": [
            [
                "7c95cc12e1c09f78"
            ]
        ]
    },
    {
        "id": "7c95cc12e1c09f78",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 600,
        "wires": [
            [
                "7e311d73c60d8abe"
            ]
        ]
    },
    {
        "id": "89f5fafa7e94f2b4",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "Office Morning Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": false,
        "entityId": "input_number.mc_heating_temperature_morning_office",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 140,
        "y": 740,
        "wires": [
            [
                "2d426cc4d984c9b1"
            ]
        ]
    },
    {
        "id": "2d426cc4d984c9b1",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 720,
        "wires": [
            [
                "a7a2f5a0bf71de87"
            ]
        ]
    },
    {
        "id": "142b0c7cbe552a48",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 1100,
        "wires": [
            [
                "2199b9956cf88c7c"
            ]
        ]
    },
    {
        "id": "56f415bb57141d28",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "Bedroom Afternoon Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "input_number.mc_heating_temperature_afternoon_bedroom",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 150,
        "y": 1100,
        "wires": [
            [
                "142b0c7cbe552a48"
            ]
        ]
    },
    {
        "id": "c9667dfa061f2ad7",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "Office Afternoon Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "input_number.mc_heating_temperature_afternoon_office",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 140,
        "y": 1260,
        "wires": [
            [
                "f138fcbdf4c1cd27"
            ]
        ]
    },
    {
        "id": "32b7744d17953b3d",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "Office Afternoon [Away] Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "input_number.mc_heating_office_away",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 160,
        "y": 1340,
        "wires": [
            [
                "5e80b36597ea79ea"
            ]
        ]
    },
    {
        "id": "3d9640479a0d3da0",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "Office Afternoon [Away] Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "input_number.mc_heating_office_away",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 160,
        "y": 820,
        "wires": [
            [
                "136b110bca130798"
            ]
        ]
    },
    {
        "id": "18d514c906049a1f",
        "type": "weekday",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "Weekend",
        "sun": true,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": true,
        "x": 420,
        "y": 920,
        "wires": [
            [
                "58ddf1d5ffc30c5d"
            ],
            [
                "d3f1758e43b0e30c"
            ]
        ]
    },
    {
        "id": "58ddf1d5ffc30c5d",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 980,
        "wires": [
            [
                "85ca140338eae407"
            ]
        ]
    },
    {
        "id": "28e457fa2d3796d4",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "Den Away Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "input_number.mc_heating_den_away",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 120,
        "y": 1040,
        "wires": [
            [
                "d3f1758e43b0e30c"
            ]
        ]
    },
    {
        "id": "4862f41e8ae32306",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "Den Away Temp",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "input_number.mc_heating_den_away",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "temp",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "mode",
                "propertyType": "msg",
                "value": "heat",
                "valueType": "str"
            }
        ],
        "x": 120,
        "y": 540,
        "wires": [
            [
                "2718b59482795a39"
            ]
        ]
    },
    {
        "id": "b45e4b1ebfa8e478",
        "type": "weekday",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "Weekend",
        "sun": true,
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": true,
        "x": 420,
        "y": 420,
        "wires": [
            [
                "f135528fe421688b"
            ],
            [
                "2718b59482795a39"
            ]
        ]
    },
    {
        "id": "2718b59482795a39",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 540,
        "wires": [
            [
                "c1d53d97503f75d3"
            ]
        ]
    },
    {
        "id": "136b110bca130798",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 820,
        "wires": [
            [
                "a7a2f5a0bf71de87"
            ]
        ]
    },
    {
        "id": "9a906b3960c19760",
        "type": "InvertUltimate",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "Invert",
        "payloadPropName": "payload",
        "translatorConfig": "84af4bac6aaf91ab",
        "x": 210,
        "y": 680,
        "wires": [
            [
                "4fe5673510673f0e"
            ]
        ]
    },
    {
        "id": "4fe5673510673f0e",
        "type": "BooleanLogicUltimate",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "",
        "payloadPropName": "payload",
        "filtertrue": "both",
        "persist": false,
        "sInitializeWith": "WaitForPayload",
        "triggertopic": "trigger",
        "outputtriggeredby": "all",
        "inputCount": "2",
        "topic": "result",
        "restrictinputevaluation": true,
        "delayEvaluation": 0,
        "translatorConfig": "84af4bac6aaf91ab",
        "x": 430,
        "y": 760,
        "wires": [
            [
                "136b110bca130798"
            ],
            [],
            []
        ]
    },
    {
        "id": "eded57b624d43fcd",
        "type": "BooleanLogicUltimate",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "",
        "payloadPropName": "payload",
        "filtertrue": "both",
        "persist": false,
        "sInitializeWith": "WaitForPayload",
        "triggertopic": "trigger",
        "outputtriggeredby": "all",
        "inputCount": "2",
        "topic": "result",
        "restrictinputevaluation": true,
        "delayEvaluation": 0,
        "translatorConfig": "84af4bac6aaf91ab",
        "x": 430,
        "y": 1140,
        "wires": [
            [
                "f138fcbdf4c1cd27"
            ],
            [],
            []
        ]
    },
    {
        "id": "e0977f3a7fe806d9",
        "type": "BooleanLogicUltimate",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "",
        "payloadPropName": "payload",
        "filtertrue": "both",
        "persist": false,
        "sInitializeWith": "WaitForPayload",
        "triggertopic": "trigger",
        "outputtriggeredby": "all",
        "inputCount": "2",
        "topic": "result",
        "restrictinputevaluation": true,
        "delayEvaluation": 0,
        "translatorConfig": "84af4bac6aaf91ab",
        "x": 430,
        "y": 1280,
        "wires": [
            [
                "5e80b36597ea79ea"
            ],
            [],
            []
        ]
    },
    {
        "id": "0aa3ca4e617d5e13",
        "type": "InvertUltimate",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "Invert",
        "payloadPropName": "payload",
        "translatorConfig": "84af4bac6aaf91ab",
        "x": 210,
        "y": 1200,
        "wires": [
            [
                "e0977f3a7fe806d9"
            ]
        ]
    },
    {
        "id": "d27cace53f391fd2",
        "type": "link in",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "WFH in",
        "links": [
            "ec94ea13c5ba85be"
        ],
        "x": 55,
        "y": 1180,
        "wires": [
            [
                "eded57b624d43fcd",
                "0aa3ca4e617d5e13"
            ]
        ]
    },
    {
        "id": "f138fcbdf4c1cd27",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 1220,
        "wires": [
            [
                "4f61c236c3447fd0"
            ]
        ]
    },
    {
        "id": "5e80b36597ea79ea",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "",
        "controlTopic": "result",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 630,
        "y": 1340,
        "wires": [
            [
                "4f61c236c3447fd0"
            ]
        ]
    },
    {
        "id": "7e311d73c60d8abe",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "Bedroom Morning Out",
        "mode": "link",
        "links": [
            "ad46586df2ca7c7e"
        ],
        "x": 745,
        "y": 600,
        "wires": []
    },
    {
        "id": "ad46586df2ca7c7e",
        "type": "link in",
        "z": "be3e27186d28303f",
        "name": "Bedroom In",
        "links": [
            "7e311d73c60d8abe",
            "7c0aaec419b46186",
            "2199b9956cf88c7c",
            "3db68f09ef6f7942",
            "f17b0c3fcbc3154e"
        ],
        "x": 1405,
        "y": 820,
        "wires": [
            [
                "3aa154924b11b8de",
                "a03662dde0a1aa27"
            ]
        ]
    },
    {
        "id": "c1d53d97503f75d3",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "Den Morning Out",
        "mode": "link",
        "links": [
            "8a99d798455efb01",
            "1e2162111c490419"
        ],
        "x": 745,
        "y": 480,
        "wires": []
    },
    {
        "id": "a7a2f5a0bf71de87",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "0f892b13d05060a0",
        "name": "Office Morning Out",
        "mode": "link",
        "links": [
            "82dc24266c9231f8"
        ],
        "x": 745,
        "y": 720,
        "wires": []
    },
    {
        "id": "8a99d798455efb01",
        "type": "link in",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "Den In",
        "links": [
            "c1d53d97503f75d3",
            "77a434fa9452dd50",
            "85ca140338eae407",
            "fbd159a53285e055",
            "6c8ac1b15d8f7e67"
        ],
        "x": 1465,
        "y": 440,
        "wires": [
            [
                "20d66d385ecf4031",
                "507df67b155ba061"
            ]
        ]
    },
    {
        "id": "77a434fa9452dd50",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "ca220799c4f3ae38",
        "name": "Den Early Out",
        "mode": "link",
        "links": [
            "8a99d798455efb01",
            "1e2162111c490419"
        ],
        "x": 745,
        "y": 200,
        "wires": []
    },
    {
        "id": "7c0aaec419b46186",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "ca220799c4f3ae38",
        "name": "Bedroom Early Out",
        "mode": "link",
        "links": [
            "ad46586df2ca7c7e"
        ],
        "x": 745,
        "y": 260,
        "wires": []
    },
    {
        "id": "0c8b516670a4a57f",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "ca220799c4f3ae38",
        "name": "Office Early Out",
        "mode": "link",
        "links": [
            "82dc24266c9231f8"
        ],
        "x": 745,
        "y": 320,
        "wires": []
    },
    {
        "id": "85ca140338eae407",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "Den Afternoon Out",
        "mode": "link",
        "links": [
            "8a99d798455efb01",
            "1e2162111c490419"
        ],
        "x": 745,
        "y": 980,
        "wires": []
    },
    {
        "id": "2199b9956cf88c7c",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "Bedroom Afternoon Out",
        "mode": "link",
        "links": [
            "ad46586df2ca7c7e"
        ],
        "x": 745,
        "y": 1100,
        "wires": []
    },
    {
        "id": "4f61c236c3447fd0",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "455fd4c30a49e396",
        "name": "Office Afternoon Out",
        "mode": "link",
        "links": [
            "82dc24266c9231f8"
        ],
        "x": 745,
        "y": 1220,
        "wires": []
    },
    {
        "id": "fbd159a53285e055",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "88eac444130cc4b9",
        "name": "Den Evening Out",
        "mode": "link",
        "links": [
            "8a99d798455efb01",
            "1e2162111c490419"
        ],
        "x": 745,
        "y": 1500,
        "wires": []
    },
    {
        "id": "3db68f09ef6f7942",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "88eac444130cc4b9",
        "name": "Bedroom Evening Out",
        "mode": "link",
        "links": [
            "ad46586df2ca7c7e"
        ],
        "x": 745,
        "y": 1560,
        "wires": []
    },
    {
        "id": "9875149c9456a05f",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "88eac444130cc4b9",
        "name": "Office Evening Out",
        "mode": "link",
        "links": [
            "82dc24266c9231f8"
        ],
        "x": 745,
        "y": 1620,
        "wires": []
    },
    {
        "id": "6c8ac1b15d8f7e67",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "93179891422343ce",
        "name": "Den Overnight Out",
        "mode": "link",
        "links": [
            "8a99d798455efb01",
            "1e2162111c490419"
        ],
        "x": 745,
        "y": 1780,
        "wires": []
    },
    {
        "id": "f17b0c3fcbc3154e",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "93179891422343ce",
        "name": "Bedroom Overnight Out",
        "mode": "link",
        "links": [
            "ad46586df2ca7c7e"
        ],
        "x": 745,
        "y": 1840,
        "wires": []
    },
    {
        "id": "d826acdf1e1ba8f2",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "93179891422343ce",
        "name": "Office Overnight Out",
        "mode": "link",
        "links": [
            "82dc24266c9231f8"
        ],
        "x": 745,
        "y": 1900,
        "wires": []
    },
    {
        "id": "20d66d385ecf4031",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "Brains",
        "func": "var msg3 = {}; \nvar stat, outside, m3_mode, leaf;\n\nvar temp = msg.temp; // target temp\nvar mode = msg.mode;\n\n\nvar temp_den = flow.get(\"temp_den\"); // avg den temp\nvar outside = global.get(\"outside\");\n\nif ( outside > temp ) {\n    stat = \"hotter out [ \" + outside + \"] [\" + temp + \" ]\";\n    node.status({fill:\"red\",shape:\"ring\",text: stat});\n} else {\n    stat = \"colder out [\"+ outside +\"] [\"+ temp +\"]\";\n    node.status({ fill: \"blue\", shape: \"ring\", text: stat });\n}\n\nif (temp < 63 ) {\n    leaf = true;\n} else {\n    leaf = false;\n}\n\nif (mode == \"heat\") {\n    if (temp > temp_den) {\n        m3_mode = \"heating\";        \n    } else {\n        m3_mode = \"\";\n    }\n} else {\n    m3_mode = \"off\";\n}\n\nmsg3.payload = {\n    \"ambient_temperature\": temp_den,\n    \"target_temperature\": temp,\n    \"hvac_state\": m3_mode,\n    \"hvac_mode\": msg.mode,\n    \"has_leaf\": leaf,\n    \"away\": false,\n    \"source\": \"brains\"\n};\n\n\n\nreturn [msg3];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 440,
        "wires": [
            [
                "a451b841995aaea7"
            ]
        ],
        "outputLabels": [
            "temp"
        ]
    },
    {
        "id": "8f1425c795b04be3",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "4ebec636418bb53e",
        "name": "Outside",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "minutes",
        "outputInitially": true,
        "outputOnChanged": true,
        "entityId": "sensor.10w_temp",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "outside",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "outside",
                "propertyType": "global",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 1010,
        "y": 80,
        "wires": [
            [
                "4c083524e8aada63"
            ]
        ]
    },
    {
        "id": "4c083524e8aada63",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "4ebec636418bb53e",
        "name": "bias function",
        "func": "var stat;\n\nif (msg.outside < 0) {\n    msg.bias = 2;\n    stat = \"really frickin cold [2]\";\n    flow.set(\"bias\", 2);\n    node.status({ fill: \"blue\", shape: \"ring\", text: stat });\n\n} else if (msg.outside < 37) {\n    stat = \"frickin cold [1]\";\n    node.status({ fill: \"yellow\", shape: \"ring\", text: stat });\n    flow.set(\"bias\", 1);    \n    msg.bias = 1;\n\n} else if (msg.outside < 50) {\n    stat = \"cold [0]\";\n    node.status({ fill: \"green\", shape: \"ring\", text: stat }); \n    flow.set(\"bias\", 0);   \n    msg.bias = 0;\n\n} else {\n    stat = \"not bad [-1]\";\n    node.status({ fill: \"red\", shape: \"ring\", text: stat });    \n    msg.bias = -1;\n    flow.set(\"bias\", -1);\n}\n    return msg;  \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 80,
        "wires": [
            [
                "95e6f1f3555cd8a4"
            ]
        ]
    },
    {
        "id": "95e6f1f3555cd8a4",
        "type": "ui_text",
        "z": "be3e27186d28303f",
        "d": true,
        "g": "4ebec636418bb53e",
        "group": "02dc96737b6af964",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current Bias: ",
        "format": "{{msg.bias}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "16",
        "color": "#ffffff",
        "x": 1490,
        "y": 80,
        "wires": []
    },
    {
        "id": "b6f91fb1a2fcdf5f",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": false,
        "entityId": "sensor.average_temp_downstairs",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "temp_den",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 1070,
        "y": 520,
        "wires": [
            [
                "f4264a53af48da24"
            ]
        ]
    },
    {
        "id": "f4264a53af48da24",
        "type": "ui_chart",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "",
        "group": "02dc96737b6af964",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "History",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1400,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "c98919621378d97e",
        "type": "ui_template",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "group": "02dc96737b6af964",
        "name": "Nest style UI Widget",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "\n<div id=\"thermostat1\"></div>\n\n<script>\n    \n    var thermostatId = \"thermostat1\";\n\n    var thermostatDial = (function() {\n\t\n\t/*\n\t * Utility functions\n\t */\n\t\n\t// Create an element with proper SVG namespace, optionally setting its attributes and appending it to another element\n\tfunction createSVGElement(tag,attributes,appendTo) {\n\t\tvar element = document.createElementNS('http://www.w3.org/2000/svg',tag);\n\t\tattr(element,attributes);\n\t\tif (appendTo) {\n\t\t\tappendTo.appendChild(element);\n\t\t}\n\t\treturn element;\n\t}\n\t\n\t// Set attributes for an element\n\tfunction attr(element,attrs) {\n\t\tfor (var i in attrs) {\n\t\t\telement.setAttribute(i,attrs[i]);\n\t\t}\n\t}\n\t\n\t// Rotate a cartesian point about given origin by X degrees\n\tfunction rotatePoint(point, angle, origin) {\n\t\tvar radians = angle * Math.PI/180;\n\t\tvar x = point[0]-origin[0];\n\t\tvar y = point[1]-origin[1];\n\t\tvar x1 = x*Math.cos(radians) - y*Math.sin(radians) + origin[0];\n\t\tvar y1 = x*Math.sin(radians) + y*Math.cos(radians) + origin[1];\n\t\treturn [x1,y1];\n\t}\n\t\n\t// Rotate an array of cartesian points about a given origin by X degrees\n\tfunction rotatePoints(points, angle, origin) {\n\t\treturn points.map(function(point) {\n\t\t\treturn rotatePoint(point, angle, origin);\n\t\t});\n\t}\n\t\n\t// Given an array of points, return an SVG path string representing the shape they define\n\tfunction pointsToPath(points) {\n\t\treturn points.map(function(point, iPoint) {\n\t\t\treturn (iPoint>0?'L':'M') + point[0] + ' ' + point[1];\n\t\t}).join(' ')+'Z';\n\t}\n\t\n\tfunction circleToPath(cx, cy, r) {\n\t\treturn [\n\t\t\t\"M\",cx,\",\",cy,\n\t\t\t\"m\",0-r,\",\",0,\n\t\t\t\"a\",r,\",\",r,0,1,\",\",0,r*2,\",\",0,\n\t\t\t\"a\",r,\",\",r,0,1,\",\",0,0-r*2,\",\",0,\n\t\t\t\"z\"\n\t\t].join(' ').replace(/\\s,\\s/g,\",\");\n\t}\n\t\n\tfunction donutPath(cx,cy,rOuter,rInner) {\n\t\treturn circleToPath(cx,cy,rOuter) + \" \" + circleToPath(cx,cy,rInner);\n\t}\n\t\n\t// Restrict a number to a min + max range\n\tfunction restrictToRange(val,min,max) {\n\t\tif (val < min) return min;\n\t\tif (val > max) return max;\n\t\treturn val;\n\t}\n\t\n\t// Round a number to the nearest 0.5\n\tfunction roundHalf(num) {\n\t\treturn Math.round(num*2)/2;\n\t}\n\t\n\t// Round a number to the nearest 0.1\n\tfunction roundTenth(num) {\n\t\treturn Math.round(num*10)/10;\n\t}\n\t\n\tfunction setClass(el, className, state) {\n\t\tel.classList[state ? 'add' : 'remove'](className);\n\t}\n\t\n\t/*\n\t * The \"MEAT\"\n\t */\n\n\treturn function(targetElement, options) {\n\t\tvar self = this;\n\t\t\n\t\t/*\n\t\t * Options\n\t\t */\n\t\toptions = options || {};\n\t\toptions = {\n\t\t    targetOnCenter: options.targetOnCenter || true, //Display target temperature in center of dial. Otherwise, display ambient temperature\n\t\t\tdiameter: options.diameter || 400,\n\t\t\tminValue: options.minValue || 50, // Minimum value for target temperature\n\t\t\tmaxValue: options.maxValue || 90, // Maximum value for target temperature\n\t\t\tnumTicks: options.numTicks || 200, // Number of tick lines to display around the dial\n\t\t\tonSetTargetTemperature: options.onSetTargetTemperature || function() {}, // Function called when new target temperature set by the dial\n\t\t};\n\t\t\n\t\t/*\n\t\t * Properties - calculated from options in many cases\n\t\t */\n\t\tvar properties = {\n\t\t\ttickDegrees: 300, // Degrees of the dial that should be covered in tick lines\n\t\t\trangeValue: options.maxValue - options.minValue,\n\t\t\tradius: options.diameter/2,\n\t\t\tticksOuterRadius: options.diameter / 30,\n\t\t\tticksInnerRadius: options.diameter / 8,\n\t\t\thvac_states: ['off', 'heating', 'cooling'],\n\t\t\tdragLockAxisDistance: 15,\n\t\t\tlabels: {\n                targetLabel: 'Set',\n                ambientUnits: 'ºF'\n\t\t\t}\n\t\t}\n\t\tproperties.lblDialPosition = [properties.radius, properties.ticksOuterRadius-(properties.ticksOuterRadius-properties.ticksInnerRadius)/2]\n\t\tproperties.offsetDegrees = 180-(360-properties.tickDegrees)/2;\n\t\t\n\t\t/*\n\t\t * Object state\n\t\t */\n\t\tvar state = {\n\t\t\ttarget_temperature: options.minValue,\n\t\t\tambient_temperature: options.minValue,\n\t\t\thvac_state: properties.hvac_states[0],\n\t\t\thas_leaf: false,\n\t\t\taway: false\n\t\t};\n\t\t\n\t\t/*\n\t\t * Property getter / setters\n\t\t */\n\t\tObject.defineProperty(this,'target_temperature',{\n\t\t\tget: function() {\n\t\t\t\treturn state.target_temperature;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tstate.target_temperature = restrictTargetTemperature(+val);\n\t\t\t\trender();\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(this,'ambient_temperature',{\n\t\t\tget: function() {\n\t\t\t\treturn state.ambient_temperature;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t    if (options.targetOnCenter)\n\t\t\t\t    state.ambient_temperature = roundHalf(+val);\n\t\t\t\telse\n\t\t\t\t    state.ambient_temperature = roundTenth(+val);\n\t\t\t\trender();\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(this,'hvac_state',{\n\t\t\tget: function() {\n\t\t\t\treturn state.hvac_state;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tif (properties.hvac_states.indexOf(val)>=0) {\n\t\t\t\t\tstate.hvac_state = val;\n\t\t\t\t\trender();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tfunction str2bool(strvalue){\n          return (strvalue && typeof strvalue == 'string') ? (strvalue.toLowerCase() == 'true') : (strvalue == true);\n        }\n\t\tObject.defineProperty(this,'has_leaf',{\n\t\t\tget: function() {\n\t\t\t\treturn state.has_leaf;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tstate.has_leaf = !!str2bool(val);\n\t\t\t\trender();\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(this,'away',{\n\t\t\tget: function() {\n\t\t\t\treturn state.away;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tstate.away = !!str2bool(val);\n\t\t\t\trender();\n\t\t\t}\n\t\t});\n\t\t\n\t\t/*\n\t\t * SVG\n\t\t */\n\t\tvar svg = createSVGElement('svg',{\n\t\t\twidth: '95%', //options.diameter+'px',\n\t\t\theight: '95%', //options.diameter+'px',\n\t\t\tviewBox: '0 0 '+options.diameter+' '+options.diameter,\n\t\t\tclass: 'dial'\n\t\t},targetElement);\n\t\t// CIRCULAR DIAL\n\t\tvar circle = createSVGElement('circle',{\n\t\t\tcx: properties.radius,\n\t\t\tcy: properties.radius,\n\t\t\tr: properties.radius,\n\t\t\tclass: 'dial__shape'\n\t\t},svg);\n\t\t// EDITABLE INDICATOR\n\t\tvar editCircle = createSVGElement('path',{\n\t\t\td: donutPath(properties.radius,properties.radius,properties.radius-4,properties.radius-8),\n\t\t\tclass: 'dial__editableIndicator',\n\t\t},svg);\n\t\t\n\t\t/*\n\t\t * Ticks\n\t\t */\n\t\tvar ticks = createSVGElement('g',{\n\t\t\tclass: 'dial__ticks'\t\n\t\t},svg);\n\t\tvar tickPoints = [\n\t\t\t[properties.radius-1, properties.ticksOuterRadius],\n\t\t\t[properties.radius+1, properties.ticksOuterRadius],\n\t\t\t[properties.radius+1, properties.ticksInnerRadius],\n\t\t\t[properties.radius-1, properties.ticksInnerRadius]\n\t\t];\n\t\tvar tickPointsLarge = [\n\t\t\t[properties.radius-1.5, properties.ticksOuterRadius],\n\t\t\t[properties.radius+1.5, properties.ticksOuterRadius],\n\t\t\t[properties.radius+1.5, properties.ticksInnerRadius+20],\n\t\t\t[properties.radius-1.5, properties.ticksInnerRadius+20]\n\t\t];\n\t\tvar theta = properties.tickDegrees/options.numTicks;\n\t\tvar tickArray = [];\n\t\tfor (var iTick=0; iTick<options.numTicks; iTick++) {\n\t\t\ttickArray.push(createSVGElement('path',{d:pointsToPath(tickPoints)},ticks));\n\t\t};\n\t\t\n\t\t/*\n\t\t * Labels\n\t\t */\n\t\tvar lblCenter = createSVGElement('text',{\n\t\t\tx: properties.radius,\n\t\t\ty: properties.radius,\n\t\t\tclass: 'dial__lbl dial__lbl--center'\n\t\t},svg);\n\t\tvar lblCenter_text = document.createTextNode('');\n\t\tlblCenter.appendChild(lblCenter_text);\n\t\t//\n\t\tvar lblCenterHalf = createSVGElement('text',{\n\t\t\tx: properties.radius + properties.radius/2.5,\n\t\t\ty: properties.radius - properties.radius/8,\n\t\t\tclass: 'dial__lbl dial__lbl--center--half'\n\t\t},svg);\n\t\tvar lblCenterHalf_text = document.createTextNode('0');\n\t\tlblCenterHalf.appendChild(lblCenterHalf_text);\n\t\t//\n\t\tvar lblCenterlabel = createSVGElement('text', {\n          x: properties.radius,\n          y: properties.radius - properties.radius / 2,\n          class: 'dial__lbl dial__lbl--centerlabel'\n        }, svg);\n        var lblCenterlabel_text = document.createTextNode(properties.labels.targetLabel);\n        lblCenterlabel.appendChild(lblCenterlabel_text);\n        //\n\t\tvar lblDial = createSVGElement('text',{\n\t\t\tclass: 'dial__lbl dial__lbl--dial'\n\t\t},svg);\n\t\tvar lblDial_text = document.createTextNode('');\n\t\tlblDial.appendChild(lblDial_text);\n\t\t//\n\t\tvar lblDialUnits = createSVGElement('text', {\n          x: properties.radius,\n          y: properties.radius + properties.radius / 5,\n          class: 'dial__lbl dial__lbl--dial--units'\n        }, svg);\n        var lblDial_units = document.createTextNode(properties.labels.ambientUnits);\n        lblDialUnits.appendChild(lblDial_units);\n        //\n\t\tvar lblAway = createSVGElement('text',{\n\t\t\tx: properties.radius,\n\t\t\ty: properties.radius * 1.5,\n\t\t\tclass: 'dial__lbl dial__lbl--away'\n\t\t},svg);\n\t\tvar lblAway_text = document.createTextNode('AWAY');\n\t\tlblAway.appendChild(lblAway_text);\n\t\t//\n\t\tvar icoLeaf = createSVGElement('path',{\n\t\t\tclass: 'dial__ico__leaf'\n\t\t},svg);\n\t\t\n\t\t/*\n\t\t * LEAF\n\t\t */\n\t\tvar leafScale = properties.radius/5/100;\n\t\tvar leafDef = [\"M\", 3, 84, \"c\", 24, 17, 51, 18, 73, -6, \"C\", 100, 52, 100, 22, 100, 4, \"c\", -13, 15, -37, 9, -70, 19, \"C\", 4, 32, 0, 63, 0, 76, \"c\", 6, -7, 18, -17, 33, -23, 24, -9, 34, -9, 48, -20, -9, 10, -20, 16, -43, 24, \"C\", 22, 63, 8, 78, 3, 84, \"z\"].map(function(x) {\n\t\t\treturn isNaN(x) ? x : x*leafScale;\n\t\t}).join(' ');\n\t\tvar translate = [properties.radius-(leafScale*100*0.5),properties.radius*1.5]\n\t\tvar icoLeaf = createSVGElement('path',{\n\t\t\tclass: 'dial__ico__leaf',\n\t\t\td: leafDef,\n\t\t\ttransform: 'translate('+translate[0]+','+translate[1]+')'\n\t\t},svg);\n\t\t\t\n\t\t/*\n\t\t * RENDER\n\t\t */\n\t\tfunction render() {\n\t\t\trenderAway();\n\t\t\trenderHvacState();\n\t\t\trenderTicks();\n\t\t\trenderCenterTemperature();\n\t\t\trenderDialTemperature();\n\t\t\trenderLeaf();\n\t\t}\n\t\trender();\n\n\t\t/*\n\t\t * RENDER - ticks\n\t\t */\n\t\tfunction renderTicks() {\n\t\t\tvar vMin, vMax;\n\t\t\tif (self.away) {\n\t\t\t    vMin = (options.targetOnCenter ? self.ambient_temperature : self.target_temperature); \n\t\t\t\tvMax = vMin;\n\t\t\t} else {\n\t\t\t\tvMin = Math.min(self.ambient_temperature, self.target_temperature);\n\t\t\t\tvMax = Math.max(self.ambient_temperature, self.target_temperature);\n\t\t\t}\n\t\t\tvar min = restrictToRange(Math.round((vMin-options.minValue)/properties.rangeValue * options.numTicks),0,options.numTicks-1);\n\t\t\tvar max = restrictToRange(Math.round((vMax-options.minValue)/properties.rangeValue * options.numTicks),0,options.numTicks-1);\n\t\t\t//\n\t\t\ttickArray.forEach(function(tick,iTick) {\n\t\t\t\tvar isLarge = iTick==min || iTick==max;\n\t\t\t\tvar isActive = iTick >= min && iTick <= max;\n\t\t\t\tattr(tick,{\n\t\t\t\t\td: pointsToPath(rotatePoints(isLarge ? tickPointsLarge: tickPoints,iTick*theta-properties.offsetDegrees,[properties.radius, properties.radius])),\n\t\t\t\t\tclass: isActive ? 'active' : ''\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\n\t\t/*\n\t\t * RENDER - dial temperature\n\t\t */\n\t\tfunction renderDialTemperature() {\n\t\t    var valueToRender = (options.targetOnCenter ? self.ambient_temperature : self.target_temperature);\n\t\t    var valueRenderedInCenter = (options.targetOnCenter ? self.target_temperature : self.ambient_temperature);\n\t\t\tlblDial_text.nodeValue = Math.floor(valueToRender);\n\t\t\tif (valueToRender%1!=0) {\n\t\t\t\tlblDial_text.nodeValue += '⁵';\n\t\t\t}\n\t\t\tvar peggedValue = restrictToRange(valueToRender, options.minValue, options.maxValue);\n\t\t\tdegs = properties.tickDegrees * (peggedValue-options.minValue)/properties.rangeValue - properties.offsetDegrees;\n\t\t\tif (peggedValue > valueRenderedInCenter) {\n\t\t\t\tdegs += 8;\n\t\t\t} else {\n\t\t\t\tdegs -= 8;\n\t\t\t}\n\t\t\tvar pos = rotatePoint(properties.lblDialPosition,degs,[properties.radius, properties.radius]);\n\t\t\tattr(lblDial,{\n\t\t\t\tx: pos[0],\n\t\t\t\ty: pos[1]\n\t\t\t});\n\t\t}\n\n\t\t/*\n\t\t * RENDER - center temperature\n\t\t */\n\t\tfunction renderCenterTemperature() {\n\t\t    \n\t\t    var valueToRender = (options.targetOnCenter ? self.target_temperature: self.ambient_temperature);\n\t\t\tlblCenter_text.nodeValue = Math.floor(valueToRender);\n\t\t\tsetClass(lblCenterHalf,'shown',true);\n\t\t    lblCenterHalf_text.nodeValue = (valueToRender*10)%10;\n\t\t}\n\t\t\n\t\t/*\n\t\t * RENDER - leaf\n\t\t */\n\t\tfunction renderLeaf() {\n\t\t\tsetClass(svg,'has-leaf',self.has_leaf);\n\t\t}\n\t\t\n\t\t/*\n\t\t * RENDER - HVAC state\n\t\t */\n\t\tfunction renderHvacState() {\n\t\t\tArray.prototype.slice.call(svg.classList).forEach(function(c) {\n\t\t\t\tif (c.match(/^dial--state--/)) {\n\t\t\t\t\tsvg.classList.remove(c);\n\t\t\t\t};\n\t\t\t});\n\t\t\tsvg.classList.add('dial--state--'+self.hvac_state);\n\t\t}\n\t\t\n\t\t/*\n\t\t * RENDER - away\n\t\t */\n\t\tfunction renderAway() {\n\t\t\tsvg.classList[self.away ? 'add' : 'remove']('away');\n\t\t}\n\t\t\n\t\t/*\n\t\t * Drag to control\n\t\t */\n\t\tvar _drag = {\n\t\t\tinProgress: false,\n\t\t\tstartPoint: null,\n\t\t\tstartTemperature: 0,\n\t\t\tlockAxis: undefined\n\t\t};\n\t\t\n\t\tfunction eventPosition(ev) {\n\t\t\tif (ev.targetTouches && ev.targetTouches.length) {\n\t\t\t\treturn [ev.targetTouches[0].clientX, ev.targetTouches[0].clientY];\n\t\t\t} else {\n\t\t\t\treturn [ev.x, ev.y];\n\t\t\t};\n\t\t}\n\t\t\n\t\tvar startDelay;\n\t\tfunction dragStart(ev) {\n\t\t\tstartDelay = setTimeout(function() {\n\t\t\t\tsetClass(svg, 'dial--edit', true);\n\t\t\t\t_drag.inProgress = true;\n\t\t\t\t_drag.startPoint = eventPosition(ev);\n\t\t\t\t_drag.startTemperature = self.target_temperature || options.minValue;\n\t\t\t\t_drag.lockAxis = undefined;\n\t\t\t},500);\n\t\t};\n\t\t\n\t\tfunction dragEnd (ev) {\n\t\t\tclearTimeout(startDelay);\n\t\t\tsetClass(svg, 'dial--edit', false);\n\t\t\tif (!_drag.inProgress) return;\n\t\t\t_drag.inProgress = false;\n\t\t\tif (self.target_temperature != _drag.startTemperature) {\n\t\t\t\tif (typeof options.onSetTargetTemperature == 'function') {\n\t\t\t\t\toptions.onSetTargetTemperature(self.target_temperature);\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\tfunction dragMove(ev) {\n\t\t\tev.preventDefault();\n\t\t\tif (!_drag.inProgress) return;\n\t\t\tvar evPos = eventPosition(ev);\n\t\t\tvar dy = _drag.startPoint[1]-evPos[1];\n\t\t\tvar dx = evPos[0] - _drag.startPoint[0];\n\t\t\tvar dxy;\n\t\t\tif (_drag.lockAxis == 'x') {\n\t\t\t\tdxy = dx;\n\t\t\t} else if (_drag.lockAxis == 'y') {\n\t\t\t\tdxy = dy;\n\t\t\t} else if (Math.abs(dy) > properties.dragLockAxisDistance) {\n\t\t\t\t_drag.lockAxis = 'y';\n\t\t\t\tdxy = dy;\n\t\t\t} else if (Math.abs(dx) > properties.dragLockAxisDistance) {\n\t\t\t\t_drag.lockAxis = 'x';\n\t\t\t\tdxy = dx;\n\t\t\t} else {\n\t\t\t\tdxy = (Math.abs(dy) > Math.abs(dx)) ? dy : dx;\n\t\t\t};\n\t\t\tvar dValue = (dxy*getSizeRatio())/(options.diameter)*properties.rangeValue;\n\t\t\tself.target_temperature = roundHalf(_drag.startTemperature+dValue);\n\t\t}\n\t\t\n\t\tsvg.addEventListener('mousedown',dragStart);\n\t\tsvg.addEventListener('touchstart',dragStart);\n\t\t\n\t\tsvg.addEventListener('mouseup',dragEnd);\n\t\tsvg.addEventListener('mouseleave',dragEnd);\n\t\tsvg.addEventListener('touchend',dragEnd);\n\t\t\n\t\tsvg.addEventListener('mousemove',dragMove);\n\t\tsvg.addEventListener('touchmove',dragMove);\n\t\t//\n\t\t\n\t\t/*\n\t\t * Helper functions\n\t\t */\n\t\tfunction restrictTargetTemperature(t) {\n\t\t\treturn restrictToRange(roundHalf(t),options.minValue,options.maxValue);\n\t\t}\n\t\t\n\t\tfunction angle(point) {\n\t\t\tvar dx = point[0] - properties.radius;\n\t\t\tvar dy = point[1] - properties.radius;\n\t\t\tvar theta = Math.atan(dx/dy) / (Math.PI/180);\n\t\t\tif (point[0]>=properties.radius && point[1] < properties.radius) {\n\t\t\t\ttheta = 90-theta - 90;\n\t\t\t} else if (point[0]>=properties.radius && point[1] >= properties.radius) {\n\t\t\t\ttheta = 90-theta + 90;\n\t\t\t} else if (point[0]<properties.radius && point[1] >= properties.radius) {\n\t\t\t\ttheta = 90-theta + 90;\n\t\t\t} else if (point[0]<properties.radius && point[1] < properties.radius) {\n\t\t\t\ttheta = 90-theta+270;\n\t\t\t}\n\t\t\treturn theta;\n\t\t};\n\t\t\n\t\tfunction getSizeRatio() {\n\t\t\treturn options.diameter / targetElement.clientWidth;\n\t\t}\n\t\t\n\t};\n})();\n\n/* ==== */\nvar initializing = true;\n\n(function(scope) {\n    var nest = new thermostatDial(document.getElementById(thermostatId),{\n    \tonSetTargetTemperature: function(v) {\n    \t    var p = {\n    \t        \"ambient_temperature\":nest.ambient_temperature,\n    \t        \"target_temperature\":v,\n    \t        \"hvac_state\":nest.hvac_state,\n    \t        \"has_leaf\": nest.has_leaf,\n    \t        \"away\":nest.away,\n\t\t\t\t\"source\": \"UI\"\n    \t    };\n    \t\tscope.send({topic: thermostatId, payload: p});\n    \t}\n    });\n    \n    scope.$watch('msg', function(data) {\n        if (initializing) {\n            initializing = false;\n            } else {\n            nest.ambient_temperature = data.payload.ambient_temperature || 0;\n            nest.target_temperature = data.payload.target_temperature || 0;\n            nest.hvac_state = data.payload.hvac_state || \"off\";\n            nest.has_leaf = data.payload.has_leaf || false;\n            nest.away = data.payload.away || false;\n        }\n        \n    });\n})(scope);\n\n</script>\n\n<style>\n\n@import url(http://fonts.googleapis.com/css?family=Open+Sans:300);\n\n#thermostat {\n margin: 0 auto;\n -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n.dial {\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n.dial.away .dial__ico__leaf {\n    visibility: hidden;\n}\n.dial.away .dial__lbl--target {\n    visibility: hidden;\n}\n.dial.away .dial__lbl--target--half {\n    visibility: hidden;\n}\n.dial.away .dial__lbl--away {\n    opacity: 1;\n}\n.dial--edit .dial__lbl--diallabel {\n  visibility: hidden;\n}\n.dial--edit .dial__lbl--centerlabel {\n  visibility: visible;\n}\n.dial .dial__shape {\n    -webkit-transition: fill 0.5s;\n    transition: fill 0.5s;\n}\n.dial path.dial__ico__leaf {\n    fill: #13EB13;\n    opacity: 0;\n    -webkit-transition: opacity 0.5s;\n    transition: opacity 0.5s;\n    pointer-events: none;\n}\n.dial.has-leaf .dial__ico__leaf {\n    display: block;\n    opacity: 1;\n    pointer-events: initial;\n}\n.dial__editableIndicator {\n    fill-rule: evenodd;\n    opacity: 0;\n    -webkit-transition: opacity 0.5s;\n    transition: opacity 0.5s;\n}\n.dial--edit path.dial__editableIndicator {\n    fill: white;\n}\n.dial--edit .dial__editableIndicator {\n    opacity: 1;\n}\n.dial--state--off .dial__shape {\n    fill: #3d3c3c;\n}\n.dial--state--heating .dial__shape {\n    fill: #E36304;\n}\n.dial--state--cooling .dial__shape {\n    fill: #007AF1;\n}\n.dial .dial__ticks path {\n    fill: rgba(255, 255, 255, 0.3);\n}\n.dial .dial__ticks path.active {\n    fill: rgba(255, 255, 255, 0.8);\n}\n.dial text {\n    fill: white;\n    text-anchor: middle;\n    font-family: Helvetica, sans-serif;\n    alignment-baseline: central;\n}\n.dial__lbl--center {\n    font-size: 120px;\n    font-weight: bold;\n}\n.dial__lbl--centerlabel {\n  font-size: 16px;\n  font-weight: normal;\n  visibility: hidden;\n}\n.dial__lbl--center--half {\n    font-size: 40px;\n    font-weight: bold;\n    opacity: 0;\n    -webkit-transition: opacity 0.1s;\n    transition: opacity 0.1s;\n}\n.dial__lbl--center--half.shown {\n    opacity: 1;\n    -webkit-transition: opacity 0s;\n    transition: opacity 0s;\n}\n.dial__lbl--dial {\n    font-size: 22px;\n    font-weight: bold;\n}\n.dial__lbl--diallabel {\n  font-size: 16px;\n  font-weight: normal;\n}\n.dial__lbl--away {\n    font-size: 48px;\n    font-weight: bold;\n    opacity: 0;\n    pointer-events: none;\n}\n#controls {\n    font-family: Open Sans;\n    background-color: rgba(255, 255, 255, 0.25);\n    padding: 20px;\n    border-radius: 5px;\n    position: absolute;\n    left: 50%;\n    -webkit-transform: translatex(-50%);\n    transform: translatex(-50%);\n    margin-top: 20px;\n}\n#controls label {\n    text-align: left;\n    display: block;\n}\n#controls label span {\n    display: inline-block;\n    width: 200px;\n    text-align: right;\n    font-size: 0.8em;\n    text-transform: uppercase;\n}\n#controls p {\n    margin: 0;\n    margin-bottom: 1em;\n    padding-bottom: 1em;\n    border-bottom: 2px solid #ccc;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2280,
        "y": 480,
        "wires": [
            [
                "4b1adef13659a409",
                "b361a414c3257c5c"
            ]
        ]
    },
    {
        "id": "713fdb46ea13fded",
        "type": "ui_switch",
        "z": "be3e27186d28303f",
        "g": "0d99ac106afc3370",
        "name": "",
        "label": "1hr Hold",
        "tooltip": "",
        "group": "02dc96737b6af964",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "manual_mode",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1360,
        "y": 280,
        "wires": [
            [
                "6b72a1a6ab5dc524"
            ]
        ]
    },
    {
        "id": "4ff81acea4744f9e",
        "type": "controltimer",
        "z": "be3e27186d28303f",
        "g": "0d99ac106afc3370",
        "name": "",
        "timerType": "delay",
        "timerDurationUnit": "minute",
        "timerDurationType": "num",
        "timerDuration": 10,
        "timerLoopTimeoutUnit": "second",
        "timerLoopTimeoutType": "num",
        "timerLoopTimeout": 0,
        "loopTimeoutMessageType": "str",
        "loopTimeoutMessage": "LOOP_TIMEOUT",
        "timerMaxLoopIterationsType": "num",
        "timerMaxLoopIterations": 0,
        "loopMaxIterationsMessageType": "str",
        "loopMaxIterationsMessage": "MAX_LOOP_ITERATIONS",
        "isRunningTimerProgressVisible": true,
        "outputReceivedMessageOnTimerTrigger": false,
        "outputReceivedMessageOnTimerHalt": false,
        "startTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfStartAction": false,
        "continueTimerOnReceivalOfStartAction": false,
        "isDebugModeEnabled": true,
        "timerTriggeredMessageType": "str",
        "timerTriggeredMessage": "TIMER_TRIGGERED",
        "timerHaltedMessageType": "str",
        "timerHaltedMessage": "TIMER_HALTED",
        "isStartActionEnabled": true,
        "isStopActionEnabled": false,
        "isResetActionEnabled": true,
        "isPauseActionEnabled": false,
        "isContinueActionEnabled": false,
        "actionPropertyNameType": "str",
        "actionPropertyName": "payload",
        "startActionNameType": "str",
        "startActionName": "START",
        "stopActionNameType": "str",
        "stopActionName": "STOP",
        "resetActionNameType": "str",
        "resetActionName": "RESET",
        "pauseActionNameType": "str",
        "pauseActionName": "PAUSE",
        "continueActionNameType": "str",
        "continueActionName": "CONTINUE",
        "x": 1700,
        "y": 280,
        "wires": [
            [
                "4e1f4de21111bd6a"
            ],
            []
        ]
    },
    {
        "id": "6f03d860c08b8d36",
        "type": "inject",
        "z": "be3e27186d28303f",
        "g": "0d99ac106afc3370",
        "name": "20:30 Reset",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "30 20 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 1020,
        "y": 280,
        "wires": [
            [
                "9832e24edeecba94"
            ]
        ]
    },
    {
        "id": "6b72a1a6ab5dc524",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "0d99ac106afc3370",
        "name": "translate",
        "func": "var msg1 = {}, msg2 = {}, msg3 = {};\nvar m1, m2, m3, stat;\nmsg2.topic = \"control\";\nmsg3.topic = \"control\";\n\n\nif (msg.payload === true) { // hold activated\n    m1 = \"START\";           // start hour timer\n    m2 = \"close\";           // close gate 1\n    m3 = \"open\";            // open gate 2\n\n    stat = \"running\";\n    flow.set(\"den_timer\", stat);\n    node.status({fill:\"green\",shape:\"ring\",text: stat});\n\n    msg1.payload = m1;\n    msg2.payload = m2;\n    msg3.payload = m3;\n    return [msg1, msg2, msg3];\n} else if(msg.payload === false) {\n    flow.set(\"overide_den\", false);\n    m2 = \"open\";\n    m3 = \"close\";\n\n    stat = \"stopped\";\n    flow.set(\"den_timer\", stat);\n    node.status({fill:\"red\",shape:\"ring\",text: stat});\n\n    msg2.payload = m2;\n    msg3.payload = m3;\n    return [null, msg2, msg3];\n} else {\n    node.error(msg.payload);\n    return [];\n}\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nflow.set(\"den_timer\", \"\");\nnode.status({ fill: \"grey\", shape: \"dot\", text: flow.get(\"den_timer\") });\n",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 280,
        "wires": [
            [
                "4ff81acea4744f9e"
            ],
            [
                "a451b841995aaea7"
            ],
            [
                "91a338f6812b98f2"
            ]
        ]
    },
    {
        "id": "4e1f4de21111bd6a",
        "type": "change",
        "z": "be3e27186d28303f",
        "g": "0d99ac106afc3370",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "den_timer",
                "pt": "flow",
                "to": "FINISHED",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1900,
        "y": 280,
        "wires": [
            [
                "713fdb46ea13fded"
            ]
        ]
    },
    {
        "id": "a451b841995aaea7",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 1810,
        "y": 440,
        "wires": [
            [
                "3046d96a7da6b48c"
            ]
        ]
    },
    {
        "id": "3046d96a7da6b48c",
        "type": "delay",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "",
        "pauseType": "rate",
        "timeout": "15",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2020,
        "y": 440,
        "wires": [
            [
                "c98919621378d97e"
            ]
        ]
    },
    {
        "id": "4b1adef13659a409",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "Router",
        "func": "// the internals\nvar outside, stat, hvac_state;\nvar nest_temp, nest_mode;\nvar minisplit_temp, minisplit_mode;\n\n// the inputs\nvar temp = msg.payload[\"target_temperature\"]; \nvar mode = msg.payload[\"hvac_mode\"];\nvar bias = flow.get(\"bias\");\nvar source = msg.payload[\"source\"];\n\n// the outputs\nvar lock = {};\nvar nest = {};          // heat or cool only\nvar minisplit = {};     // heat, cool or off\nvar generic = {};       // heat or cool only\nvar loop = {};          // original message with new topic\n\n// the clever bits\nif (source == \"UI\") {  // change the source lock\n    //node.warn(\"UI\");    \n    lock.payload = \"UI\";\n    } else if (source == \"loop\") {\n    //node.warn(\"loop\");\n    lock.payload = \"loop\";\n    } else {\n    //node.warn(\"brains\");\n    lock.payload = \"brains\";\n    }\n\nif (temp > flow.get(\"temp_den\")) {\n    hvac_state = \"heating\";\n} else {\n    hvac_state = \"off\";\n}\n\nnest_temp = temp + bias;\nminisplit_temp = temp - bias;\nnest_mode = \"heat\";\nminisplit_mode = mode;\n\nnest.payload = {\n    data: {\n        \"temperature\": nest_temp,\n        \"hvac_mode\": nest_mode\n        }\n    };\n\nminisplit.payload = {\n\n    service: \"set_temperature\",\n    data: {\n        \"temperature\": minisplit_temp,\n        \"hvac_mode\": minisplit_mode,\n\n        }\n    };\n\ngeneric.payload = {\n    data : {\n        \"temperature\": nest_temp,\n        \"hvac_mode\": nest_mode\n      }\n    };\n\nloop.payload = {\n    \"ambient_temperature\": flow.get(\"temp_den\"),\n    \"target_temperature\": msg.payload[\"target_temperature\"],\n    \"hvac_state\": hvac_state,\n    \"hvac_mode\": msg.payload[\"hvac_mode\"],\n    \"has_leaf\": msg.payload[\"has_leaf\"],\n    \"away\": false,\n    \"source\": \"loop\"\n    }\n\nflow.set(\"den_last\", loop.payload ); // used for reinjecting when on lock\n\nstat = \"nest: \"+ nest_temp+ \" / msp: \"+ minisplit_temp;\nnode.status({ fill: \"green\", shape: \"dot\", text: stat });\nreturn [lock, nest, minisplit, generic, loop];\n\n\n\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 480,
        "wires": [
            [
                "af9e78b3713be8b6"
            ],
            [
                "3bc581866c40607c"
            ],
            [
                "78da8acd302aedcc"
            ],
            [
                "d6342d3f9dfea3fa"
            ],
            [
                "91a338f6812b98f2"
            ]
        ],
        "outputLabels": [
            "Nest",
            "MiniSplit",
            "Generic",
            "",
            ""
        ]
    },
    {
        "id": "78da8acd302aedcc",
        "type": "api-call-service",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "Climate - Den MiniSplit",
        "server": "59355537.b6bb8c",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_temperature",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "climate.esphome_minisplit_den"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2800,
        "y": 420,
        "wires": [
            [
                "c824e994237ea892"
            ]
        ]
    },
    {
        "id": "3bc581866c40607c",
        "type": "api-call-service",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "Climate - Den Nest",
        "server": "59355537.b6bb8c",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_temperature",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "climate.mc_gen_th_den"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2790,
        "y": 300,
        "wires": [
            [
                "69879f143da93e8b"
            ]
        ]
    },
    {
        "id": "142ea8b5a0298979",
        "type": "debug",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "generic input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3010,
        "y": 520,
        "wires": []
    },
    {
        "id": "c824e994237ea892",
        "type": "debug",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "minisplit input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3000,
        "y": 420,
        "wires": []
    },
    {
        "id": "69879f143da93e8b",
        "type": "debug",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "nest input",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3000,
        "y": 300,
        "wires": []
    },
    {
        "id": "d6342d3f9dfea3fa",
        "type": "api-call-service",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "Climate - Den Generic",
        "server": "59355537.b6bb8c",
        "version": 5,
        "debugenabled": false,
        "domain": "climate",
        "service": "set_temperature",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "climate.mc_gen_th_den"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "data"
            }
        ],
        "queue": "none",
        "x": 2800,
        "y": 520,
        "wires": [
            [
                "142ea8b5a0298979"
            ]
        ]
    },
    {
        "id": "336c7c4d0ff665ae",
        "type": "inject",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "Nudge",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "den_last",
        "payloadType": "flow",
        "x": 1560,
        "y": 500,
        "wires": [
            [
                "91a338f6812b98f2"
            ]
        ]
    },
    {
        "id": "91a338f6812b98f2",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 1810,
        "y": 500,
        "wires": [
            [
                "c262dcb8ab6e85c4"
            ]
        ]
    },
    {
        "id": "c262dcb8ab6e85c4",
        "type": "delay",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "",
        "pauseType": "rate",
        "timeout": "15",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2020,
        "y": 500,
        "wires": [
            [
                "c98919621378d97e"
            ]
        ]
    },
    {
        "id": "6e0865c18cedb6ad",
        "type": "comment",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "ESP Module Info",
        "info": "https://github.com/geoffdavis/esphome-mitsubishiheatpump",
        "x": 2780,
        "y": 380,
        "wires": []
    },
    {
        "id": "ca693203203d60de",
        "type": "comment",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "ESP Module Info",
        "info": "https://github.com/geoffdavis/esphome-mitsubishiheatpump",
        "x": 2780,
        "y": 260,
        "wires": []
    },
    {
        "id": "9dd68ff7481787c1",
        "type": "comment",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "ESP Module Info",
        "info": "https://github.com/geoffdavis/esphome-mitsubishiheatpump",
        "x": 2820,
        "y": 480,
        "wires": []
    },
    {
        "id": "b361a414c3257c5c",
        "type": "debug",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2430,
        "y": 360,
        "wires": []
    },
    {
        "id": "dbc205ac8904383d",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "0d99ac106afc3370",
        "name": "Locker",
        "func": "var msg1 = {}, msg2 = {};\n\n//node.warn(msg.payload);\n\nif (msg.payload == \"UI\") {\n    if (flow.get(\"den_timer\") == \"running\") {\n        msg2.payload = \"RESET\";  \n    } else {\n        msg1.payload = true;\n        msg2.payload = \"START\";\n    }\n    return [msg1, msg2];    \n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 340,
        "wires": [
            [
                "9832e24edeecba94"
            ],
            [
                "d7a5dc8647b7a6ad"
            ]
        ]
    },
    {
        "id": "af9e78b3713be8b6",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "den_router_out",
        "mode": "link",
        "links": [
            "eb922506373acabc"
        ],
        "x": 2595,
        "y": 340,
        "wires": []
    },
    {
        "id": "eb922506373acabc",
        "type": "link in",
        "z": "be3e27186d28303f",
        "g": "0d99ac106afc3370",
        "name": "den_router_in",
        "links": [
            "af9e78b3713be8b6"
        ],
        "x": 935,
        "y": 340,
        "wires": [
            [
                "dbc205ac8904383d"
            ]
        ]
    },
    {
        "id": "4cd20496d2e93d13",
        "type": "comment",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "",
        "info": "[https://github.com/automatikas/Node-red-Nest-thermostat]()",
        "x": 2260,
        "y": 420,
        "wires": []
    },
    {
        "id": "9832e24edeecba94",
        "type": "delay",
        "z": "be3e27186d28303f",
        "g": "0d99ac106afc3370",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1200,
        "y": 280,
        "wires": [
            [
                "713fdb46ea13fded"
            ]
        ]
    },
    {
        "id": "e5aad772454507ab",
        "type": "StatusUltimate",
        "z": "be3e27186d28303f",
        "g": "0d99ac106afc3370",
        "name": "Status",
        "property": "payload",
        "x": 1510,
        "y": 340,
        "wires": [
            [
                "4ff81acea4744f9e"
            ]
        ]
    },
    {
        "id": "3aa154924b11b8de",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "Brains",
        "func": "var msg3 = {}; \nvar stat, outside, m3_mode, leaf;\n\nvar temp = msg.temp; // target temp\nvar mode = msg.mode;\n\n\nvar temp_bed = flow.get(\"temp_bed\"); // avg bed temp\nvar outside = global.get(\"outside\");\n\nif ( outside > temp ) {\n    stat = \"hotter out [ \" + outside + \"] [\" + temp + \" ]\";\n    node.status({fill:\"red\",shape:\"ring\",text: stat});\n} else {\n    stat = \"colder out [\"+ outside +\"] [\"+ temp +\"]\";\n    node.status({ fill: \"blue\", shape: \"ring\", text: stat });\n}\n\nif (temp < 63 ) {\n    leaf = true;\n} else {\n    leaf = false;\n}\n\nif (mode == \"heat\") {\n    if (temp > temp_bed) {\n        m3_mode = \"heating\";        \n    } else {\n        m3_mode = \"\";\n    }\n} else {\n    m3_mode = \"off\";\n}\n\nmsg3.payload = {\n    \"ambient_temperature\": temp_bed,\n    \"target_temperature\": temp,\n    \"hvac_state\": m3_mode,\n    \"hvac_mode\": msg.mode,\n    \"has_leaf\": leaf,\n    \"away\": false,\n    \"source\": \"brains\"\n};\n\n\n\nreturn [msg3];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 820,
        "wires": [
            [
                "6ab90a65a4bdfb52"
            ]
        ],
        "outputLabels": [
            "temp"
        ]
    },
    {
        "id": "560bce0c9b560887",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "1",
        "updateIntervalType": "num",
        "updateIntervalUnits": "minutes",
        "outputInitially": true,
        "outputOnChanged": false,
        "entityId": "sensor.average_temp_upstairs",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "temp_bed",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 1060,
        "y": 900,
        "wires": [
            [
                "5ea3f1b845d043db"
            ]
        ]
    },
    {
        "id": "5ea3f1b845d043db",
        "type": "ui_chart",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "",
        "group": "6e3f8970e878b45c",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "History",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1400,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "c5dc09fa515bf2a0",
        "type": "ui_template",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "group": "6e3f8970e878b45c",
        "name": "Nest style UI Widget",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "\n<div id=\"thermostat2\"></div>\n\n<script>\n    \n    var thermostatId = \"thermostat2\";\n\n    var thermostatDial = (function() {\n\t\n\t/*\n\t * Utility functions\n\t */\n\t\n\t// Create an element with proper SVG namespace, optionally setting its attributes and appending it to another element\n\tfunction createSVGElement(tag,attributes,appendTo) {\n\t\tvar element = document.createElementNS('http://www.w3.org/2000/svg',tag);\n\t\tattr(element,attributes);\n\t\tif (appendTo) {\n\t\t\tappendTo.appendChild(element);\n\t\t}\n\t\treturn element;\n\t}\n\t\n\t// Set attributes for an element\n\tfunction attr(element,attrs) {\n\t\tfor (var i in attrs) {\n\t\t\telement.setAttribute(i,attrs[i]);\n\t\t}\n\t}\n\t\n\t// Rotate a cartesian point about given origin by X degrees\n\tfunction rotatePoint(point, angle, origin) {\n\t\tvar radians = angle * Math.PI/180;\n\t\tvar x = point[0]-origin[0];\n\t\tvar y = point[1]-origin[1];\n\t\tvar x1 = x*Math.cos(radians) - y*Math.sin(radians) + origin[0];\n\t\tvar y1 = x*Math.sin(radians) + y*Math.cos(radians) + origin[1];\n\t\treturn [x1,y1];\n\t}\n\t\n\t// Rotate an array of cartesian points about a given origin by X degrees\n\tfunction rotatePoints(points, angle, origin) {\n\t\treturn points.map(function(point) {\n\t\t\treturn rotatePoint(point, angle, origin);\n\t\t});\n\t}\n\t\n\t// Given an array of points, return an SVG path string representing the shape they define\n\tfunction pointsToPath(points) {\n\t\treturn points.map(function(point, iPoint) {\n\t\t\treturn (iPoint>0?'L':'M') + point[0] + ' ' + point[1];\n\t\t}).join(' ')+'Z';\n\t}\n\t\n\tfunction circleToPath(cx, cy, r) {\n\t\treturn [\n\t\t\t\"M\",cx,\",\",cy,\n\t\t\t\"m\",0-r,\",\",0,\n\t\t\t\"a\",r,\",\",r,0,1,\",\",0,r*2,\",\",0,\n\t\t\t\"a\",r,\",\",r,0,1,\",\",0,0-r*2,\",\",0,\n\t\t\t\"z\"\n\t\t].join(' ').replace(/\\s,\\s/g,\",\");\n\t}\n\t\n\tfunction donutPath(cx,cy,rOuter,rInner) {\n\t\treturn circleToPath(cx,cy,rOuter) + \" \" + circleToPath(cx,cy,rInner);\n\t}\n\t\n\t// Restrict a number to a min + max range\n\tfunction restrictToRange(val,min,max) {\n\t\tif (val < min) return min;\n\t\tif (val > max) return max;\n\t\treturn val;\n\t}\n\t\n\t// Round a number to the nearest 0.5\n\tfunction roundHalf(num) {\n\t\treturn Math.round(num*2)/2;\n\t}\n\t\n\t// Round a number to the nearest 0.1\n\tfunction roundTenth(num) {\n\t\treturn Math.round(num*10)/10;\n\t}\n\t\n\tfunction setClass(el, className, state) {\n\t\tel.classList[state ? 'add' : 'remove'](className);\n\t}\n\t\n\t/*\n\t * The \"MEAT\"\n\t */\n\n\treturn function(targetElement, options) {\n\t\tvar self = this;\n\t\t\n\t\t/*\n\t\t * Options\n\t\t */\n\t\toptions = options || {};\n\t\toptions = {\n\t\t    targetOnCenter: options.targetOnCenter || true, //Display target temperature in center of dial. Otherwise, display ambient temperature\n\t\t\tdiameter: options.diameter || 400,\n\t\t\tminValue: options.minValue || 50, // Minimum value for target temperature\n\t\t\tmaxValue: options.maxValue || 90, // Maximum value for target temperature\n\t\t\tnumTicks: options.numTicks || 200, // Number of tick lines to display around the dial\n\t\t\tonSetTargetTemperature: options.onSetTargetTemperature || function() {}, // Function called when new target temperature set by the dial\n\t\t};\n\t\t\n\t\t/*\n\t\t * Properties - calculated from options in many cases\n\t\t */\n\t\tvar properties = {\n\t\t\ttickDegrees: 300, // Degrees of the dial that should be covered in tick lines\n\t\t\trangeValue: options.maxValue - options.minValue,\n\t\t\tradius: options.diameter/2,\n\t\t\tticksOuterRadius: options.diameter / 30,\n\t\t\tticksInnerRadius: options.diameter / 8,\n\t\t\thvac_states: ['off', 'heating', 'cooling'],\n\t\t\tdragLockAxisDistance: 15,\n\t\t\tlabels: {\n                targetLabel: 'Set',\n                ambientUnits: 'ºF'\n\t\t\t}\n\t\t}\n\t\tproperties.lblDialPosition = [properties.radius, properties.ticksOuterRadius-(properties.ticksOuterRadius-properties.ticksInnerRadius)/2]\n\t\tproperties.offsetDegrees = 180-(360-properties.tickDegrees)/2;\n\t\t\n\t\t/*\n\t\t * Object state\n\t\t */\n\t\tvar state = {\n\t\t\ttarget_temperature: options.minValue,\n\t\t\tambient_temperature: options.minValue,\n\t\t\thvac_state: properties.hvac_states[0],\n\t\t\thas_leaf: false,\n\t\t\taway: false\n\t\t};\n\t\t\n\t\t/*\n\t\t * Property getter / setters\n\t\t */\n\t\tObject.defineProperty(this,'target_temperature',{\n\t\t\tget: function() {\n\t\t\t\treturn state.target_temperature;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tstate.target_temperature = restrictTargetTemperature(+val);\n\t\t\t\trender();\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(this,'ambient_temperature',{\n\t\t\tget: function() {\n\t\t\t\treturn state.ambient_temperature;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t    if (options.targetOnCenter)\n\t\t\t\t    state.ambient_temperature = roundHalf(+val);\n\t\t\t\telse\n\t\t\t\t    state.ambient_temperature = roundTenth(+val);\n\t\t\t\trender();\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(this,'hvac_state',{\n\t\t\tget: function() {\n\t\t\t\treturn state.hvac_state;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tif (properties.hvac_states.indexOf(val)>=0) {\n\t\t\t\t\tstate.hvac_state = val;\n\t\t\t\t\trender();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tfunction str2bool(strvalue){\n          return (strvalue && typeof strvalue == 'string') ? (strvalue.toLowerCase() == 'true') : (strvalue == true);\n        }\n\t\tObject.defineProperty(this,'has_leaf',{\n\t\t\tget: function() {\n\t\t\t\treturn state.has_leaf;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tstate.has_leaf = !!str2bool(val);\n\t\t\t\trender();\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(this,'away',{\n\t\t\tget: function() {\n\t\t\t\treturn state.away;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tstate.away = !!str2bool(val);\n\t\t\t\trender();\n\t\t\t}\n\t\t});\n\t\t\n\t\t/*\n\t\t * SVG\n\t\t */\n\t\tvar svg = createSVGElement('svg',{\n\t\t\twidth: '95%', //options.diameter+'px',\n\t\t\theight: '95%', //options.diameter+'px',\n\t\t\tviewBox: '0 0 '+options.diameter+' '+options.diameter,\n\t\t\tclass: 'dial'\n\t\t},targetElement);\n\t\t// CIRCULAR DIAL\n\t\tvar circle = createSVGElement('circle',{\n\t\t\tcx: properties.radius,\n\t\t\tcy: properties.radius,\n\t\t\tr: properties.radius,\n\t\t\tclass: 'dial__shape'\n\t\t},svg);\n\t\t// EDITABLE INDICATOR\n\t\tvar editCircle = createSVGElement('path',{\n\t\t\td: donutPath(properties.radius,properties.radius,properties.radius-4,properties.radius-8),\n\t\t\tclass: 'dial__editableIndicator',\n\t\t},svg);\n\t\t\n\t\t/*\n\t\t * Ticks\n\t\t */\n\t\tvar ticks = createSVGElement('g',{\n\t\t\tclass: 'dial__ticks'\t\n\t\t},svg);\n\t\tvar tickPoints = [\n\t\t\t[properties.radius-1, properties.ticksOuterRadius],\n\t\t\t[properties.radius+1, properties.ticksOuterRadius],\n\t\t\t[properties.radius+1, properties.ticksInnerRadius],\n\t\t\t[properties.radius-1, properties.ticksInnerRadius]\n\t\t];\n\t\tvar tickPointsLarge = [\n\t\t\t[properties.radius-1.5, properties.ticksOuterRadius],\n\t\t\t[properties.radius+1.5, properties.ticksOuterRadius],\n\t\t\t[properties.radius+1.5, properties.ticksInnerRadius+20],\n\t\t\t[properties.radius-1.5, properties.ticksInnerRadius+20]\n\t\t];\n\t\tvar theta = properties.tickDegrees/options.numTicks;\n\t\tvar tickArray = [];\n\t\tfor (var iTick=0; iTick<options.numTicks; iTick++) {\n\t\t\ttickArray.push(createSVGElement('path',{d:pointsToPath(tickPoints)},ticks));\n\t\t};\n\t\t\n\t\t/*\n\t\t * Labels\n\t\t */\n\t\tvar lblCenter = createSVGElement('text',{\n\t\t\tx: properties.radius,\n\t\t\ty: properties.radius,\n\t\t\tclass: 'dial__lbl dial__lbl--center'\n\t\t},svg);\n\t\tvar lblCenter_text = document.createTextNode('');\n\t\tlblCenter.appendChild(lblCenter_text);\n\t\t//\n\t\tvar lblCenterHalf = createSVGElement('text',{\n\t\t\tx: properties.radius + properties.radius/2.5,\n\t\t\ty: properties.radius - properties.radius/8,\n\t\t\tclass: 'dial__lbl dial__lbl--center--half'\n\t\t},svg);\n\t\tvar lblCenterHalf_text = document.createTextNode('0');\n\t\tlblCenterHalf.appendChild(lblCenterHalf_text);\n\t\t//\n\t\tvar lblCenterlabel = createSVGElement('text', {\n          x: properties.radius,\n          y: properties.radius - properties.radius / 2,\n          class: 'dial__lbl dial__lbl--centerlabel'\n        }, svg);\n        var lblCenterlabel_text = document.createTextNode(properties.labels.targetLabel);\n        lblCenterlabel.appendChild(lblCenterlabel_text);\n        //\n\t\tvar lblDial = createSVGElement('text',{\n\t\t\tclass: 'dial__lbl dial__lbl--dial'\n\t\t},svg);\n\t\tvar lblDial_text = document.createTextNode('');\n\t\tlblDial.appendChild(lblDial_text);\n\t\t//\n\t\tvar lblDialUnits = createSVGElement('text', {\n          x: properties.radius,\n          y: properties.radius + properties.radius / 5,\n          class: 'dial__lbl dial__lbl--dial--units'\n        }, svg);\n        var lblDial_units = document.createTextNode(properties.labels.ambientUnits);\n        lblDialUnits.appendChild(lblDial_units);\n        //\n\t\tvar lblAway = createSVGElement('text',{\n\t\t\tx: properties.radius,\n\t\t\ty: properties.radius * 1.5,\n\t\t\tclass: 'dial__lbl dial__lbl--away'\n\t\t},svg);\n\t\tvar lblAway_text = document.createTextNode('AWAY');\n\t\tlblAway.appendChild(lblAway_text);\n\t\t//\n\t\tvar icoLeaf = createSVGElement('path',{\n\t\t\tclass: 'dial__ico__leaf'\n\t\t},svg);\n\t\t\n\t\t/*\n\t\t * LEAF\n\t\t */\n\t\tvar leafScale = properties.radius/5/100;\n\t\tvar leafDef = [\"M\", 3, 84, \"c\", 24, 17, 51, 18, 73, -6, \"C\", 100, 52, 100, 22, 100, 4, \"c\", -13, 15, -37, 9, -70, 19, \"C\", 4, 32, 0, 63, 0, 76, \"c\", 6, -7, 18, -17, 33, -23, 24, -9, 34, -9, 48, -20, -9, 10, -20, 16, -43, 24, \"C\", 22, 63, 8, 78, 3, 84, \"z\"].map(function(x) {\n\t\t\treturn isNaN(x) ? x : x*leafScale;\n\t\t}).join(' ');\n\t\tvar translate = [properties.radius-(leafScale*100*0.5),properties.radius*1.5]\n\t\tvar icoLeaf = createSVGElement('path',{\n\t\t\tclass: 'dial__ico__leaf',\n\t\t\td: leafDef,\n\t\t\ttransform: 'translate('+translate[0]+','+translate[1]+')'\n\t\t},svg);\n\t\t\t\n\t\t/*\n\t\t * RENDER\n\t\t */\n\t\tfunction render() {\n\t\t\trenderAway();\n\t\t\trenderHvacState();\n\t\t\trenderTicks();\n\t\t\trenderCenterTemperature();\n\t\t\trenderDialTemperature();\n\t\t\trenderLeaf();\n\t\t}\n\t\trender();\n\n\t\t/*\n\t\t * RENDER - ticks\n\t\t */\n\t\tfunction renderTicks() {\n\t\t\tvar vMin, vMax;\n\t\t\tif (self.away) {\n\t\t\t    vMin = (options.targetOnCenter ? self.ambient_temperature : self.target_temperature); \n\t\t\t\tvMax = vMin;\n\t\t\t} else {\n\t\t\t\tvMin = Math.min(self.ambient_temperature, self.target_temperature);\n\t\t\t\tvMax = Math.max(self.ambient_temperature, self.target_temperature);\n\t\t\t}\n\t\t\tvar min = restrictToRange(Math.round((vMin-options.minValue)/properties.rangeValue * options.numTicks),0,options.numTicks-1);\n\t\t\tvar max = restrictToRange(Math.round((vMax-options.minValue)/properties.rangeValue * options.numTicks),0,options.numTicks-1);\n\t\t\t//\n\t\t\ttickArray.forEach(function(tick,iTick) {\n\t\t\t\tvar isLarge = iTick==min || iTick==max;\n\t\t\t\tvar isActive = iTick >= min && iTick <= max;\n\t\t\t\tattr(tick,{\n\t\t\t\t\td: pointsToPath(rotatePoints(isLarge ? tickPointsLarge: tickPoints,iTick*theta-properties.offsetDegrees,[properties.radius, properties.radius])),\n\t\t\t\t\tclass: isActive ? 'active' : ''\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\n\t\t/*\n\t\t * RENDER - dial temperature\n\t\t */\n\t\tfunction renderDialTemperature() {\n\t\t    var valueToRender = (options.targetOnCenter ? self.ambient_temperature : self.target_temperature);\n\t\t    var valueRenderedInCenter = (options.targetOnCenter ? self.target_temperature : self.ambient_temperature);\n\t\t\tlblDial_text.nodeValue = Math.floor(valueToRender);\n\t\t\tif (valueToRender%1!=0) {\n\t\t\t\tlblDial_text.nodeValue += '⁵';\n\t\t\t}\n\t\t\tvar peggedValue = restrictToRange(valueToRender, options.minValue, options.maxValue);\n\t\t\tdegs = properties.tickDegrees * (peggedValue-options.minValue)/properties.rangeValue - properties.offsetDegrees;\n\t\t\tif (peggedValue > valueRenderedInCenter) {\n\t\t\t\tdegs += 8;\n\t\t\t} else {\n\t\t\t\tdegs -= 8;\n\t\t\t}\n\t\t\tvar pos = rotatePoint(properties.lblDialPosition,degs,[properties.radius, properties.radius]);\n\t\t\tattr(lblDial,{\n\t\t\t\tx: pos[0],\n\t\t\t\ty: pos[1]\n\t\t\t});\n\t\t}\n\n\t\t/*\n\t\t * RENDER - center temperature\n\t\t */\n\t\tfunction renderCenterTemperature() {\n\t\t    \n\t\t    var valueToRender = (options.targetOnCenter ? self.target_temperature: self.ambient_temperature);\n\t\t\tlblCenter_text.nodeValue = Math.floor(valueToRender);\n\t\t\tsetClass(lblCenterHalf,'shown',true);\n\t\t    lblCenterHalf_text.nodeValue = (valueToRender*10)%10;\n\t\t}\n\t\t\n\t\t/*\n\t\t * RENDER - leaf\n\t\t */\n\t\tfunction renderLeaf() {\n\t\t\tsetClass(svg,'has-leaf',self.has_leaf);\n\t\t}\n\t\t\n\t\t/*\n\t\t * RENDER - HVAC state\n\t\t */\n\t\tfunction renderHvacState() {\n\t\t\tArray.prototype.slice.call(svg.classList).forEach(function(c) {\n\t\t\t\tif (c.match(/^dial--state--/)) {\n\t\t\t\t\tsvg.classList.remove(c);\n\t\t\t\t};\n\t\t\t});\n\t\t\tsvg.classList.add('dial--state--'+self.hvac_state);\n\t\t}\n\t\t\n\t\t/*\n\t\t * RENDER - away\n\t\t */\n\t\tfunction renderAway() {\n\t\t\tsvg.classList[self.away ? 'add' : 'remove']('away');\n\t\t}\n\t\t\n\t\t/*\n\t\t * Drag to control\n\t\t */\n\t\tvar _drag = {\n\t\t\tinProgress: false,\n\t\t\tstartPoint: null,\n\t\t\tstartTemperature: 0,\n\t\t\tlockAxis: undefined\n\t\t};\n\t\t\n\t\tfunction eventPosition(ev) {\n\t\t\tif (ev.targetTouches && ev.targetTouches.length) {\n\t\t\t\treturn [ev.targetTouches[0].clientX, ev.targetTouches[0].clientY];\n\t\t\t} else {\n\t\t\t\treturn [ev.x, ev.y];\n\t\t\t};\n\t\t}\n\t\t\n\t\tvar startDelay;\n\t\tfunction dragStart(ev) {\n\t\t\tstartDelay = setTimeout(function() {\n\t\t\t\tsetClass(svg, 'dial--edit', true);\n\t\t\t\t_drag.inProgress = true;\n\t\t\t\t_drag.startPoint = eventPosition(ev);\n\t\t\t\t_drag.startTemperature = self.target_temperature || options.minValue;\n\t\t\t\t_drag.lockAxis = undefined;\n\t\t\t},500);\n\t\t};\n\t\t\n\t\tfunction dragEnd (ev) {\n\t\t\tclearTimeout(startDelay);\n\t\t\tsetClass(svg, 'dial--edit', false);\n\t\t\tif (!_drag.inProgress) return;\n\t\t\t_drag.inProgress = false;\n\t\t\tif (self.target_temperature != _drag.startTemperature) {\n\t\t\t\tif (typeof options.onSetTargetTemperature == 'function') {\n\t\t\t\t\toptions.onSetTargetTemperature(self.target_temperature);\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\tfunction dragMove(ev) {\n\t\t\tev.preventDefault();\n\t\t\tif (!_drag.inProgress) return;\n\t\t\tvar evPos = eventPosition(ev);\n\t\t\tvar dy = _drag.startPoint[1]-evPos[1];\n\t\t\tvar dx = evPos[0] - _drag.startPoint[0];\n\t\t\tvar dxy;\n\t\t\tif (_drag.lockAxis == 'x') {\n\t\t\t\tdxy = dx;\n\t\t\t} else if (_drag.lockAxis == 'y') {\n\t\t\t\tdxy = dy;\n\t\t\t} else if (Math.abs(dy) > properties.dragLockAxisDistance) {\n\t\t\t\t_drag.lockAxis = 'y';\n\t\t\t\tdxy = dy;\n\t\t\t} else if (Math.abs(dx) > properties.dragLockAxisDistance) {\n\t\t\t\t_drag.lockAxis = 'x';\n\t\t\t\tdxy = dx;\n\t\t\t} else {\n\t\t\t\tdxy = (Math.abs(dy) > Math.abs(dx)) ? dy : dx;\n\t\t\t};\n\t\t\tvar dValue = (dxy*getSizeRatio())/(options.diameter)*properties.rangeValue;\n\t\t\tself.target_temperature = roundHalf(_drag.startTemperature+dValue);\n\t\t}\n\t\t\n\t\tsvg.addEventListener('mousedown',dragStart);\n\t\tsvg.addEventListener('touchstart',dragStart);\n\t\t\n\t\tsvg.addEventListener('mouseup',dragEnd);\n\t\tsvg.addEventListener('mouseleave',dragEnd);\n\t\tsvg.addEventListener('touchend',dragEnd);\n\t\t\n\t\tsvg.addEventListener('mousemove',dragMove);\n\t\tsvg.addEventListener('touchmove',dragMove);\n\t\t//\n\t\t\n\t\t/*\n\t\t * Helper functions\n\t\t */\n\t\tfunction restrictTargetTemperature(t) {\n\t\t\treturn restrictToRange(roundHalf(t),options.minValue,options.maxValue);\n\t\t}\n\t\t\n\t\tfunction angle(point) {\n\t\t\tvar dx = point[0] - properties.radius;\n\t\t\tvar dy = point[1] - properties.radius;\n\t\t\tvar theta = Math.atan(dx/dy) / (Math.PI/180);\n\t\t\tif (point[0]>=properties.radius && point[1] < properties.radius) {\n\t\t\t\ttheta = 90-theta - 90;\n\t\t\t} else if (point[0]>=properties.radius && point[1] >= properties.radius) {\n\t\t\t\ttheta = 90-theta + 90;\n\t\t\t} else if (point[0]<properties.radius && point[1] >= properties.radius) {\n\t\t\t\ttheta = 90-theta + 90;\n\t\t\t} else if (point[0]<properties.radius && point[1] < properties.radius) {\n\t\t\t\ttheta = 90-theta+270;\n\t\t\t}\n\t\t\treturn theta;\n\t\t};\n\t\t\n\t\tfunction getSizeRatio() {\n\t\t\treturn options.diameter / targetElement.clientWidth;\n\t\t}\n\t\t\n\t};\n})();\n\n/* ==== */\nvar initializing = true;\n\n(function(scope) {\n    var nest = new thermostatDial(document.getElementById(thermostatId),{\n    \tonSetTargetTemperature: function(v) {\n    \t    var p = {\n    \t        \"ambient_temperature\":nest.ambient_temperature,\n    \t        \"target_temperature\":v,\n    \t        \"hvac_state\":nest.hvac_state,\n    \t        \"has_leaf\": nest.has_leaf,\n    \t        \"away\":nest.away,\n\t\t\t\t\"source\": \"UI\"\n    \t    };\n    \t\tscope.send({topic: thermostatId, payload: p});\n    \t}\n    });\n    \n    scope.$watch('msg', function(data) {\n        if (initializing) {\n            initializing = false;\n            } else {\n            nest.ambient_temperature = data.payload.ambient_temperature || 0;\n            nest.target_temperature = data.payload.target_temperature || 0;\n            nest.hvac_state = data.payload.hvac_state || \"off\";\n            nest.has_leaf = data.payload.has_leaf || false;\n            nest.away = data.payload.away || false;\n        }\n        \n    });\n})(scope);\n\n</script>\n\n<style>\n\n@import url(http://fonts.googleapis.com/css?family=Open+Sans:300);\n\n#thermostat {\n margin: 0 auto;\n -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n.dial {\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n.dial.away .dial__ico__leaf {\n    visibility: hidden;\n}\n.dial.away .dial__lbl--target {\n    visibility: hidden;\n}\n.dial.away .dial__lbl--target--half {\n    visibility: hidden;\n}\n.dial.away .dial__lbl--away {\n    opacity: 1;\n}\n.dial--edit .dial__lbl--diallabel {\n  visibility: hidden;\n}\n.dial--edit .dial__lbl--centerlabel {\n  visibility: visible;\n}\n.dial .dial__shape {\n    -webkit-transition: fill 0.5s;\n    transition: fill 0.5s;\n}\n.dial path.dial__ico__leaf {\n    fill: #13EB13;\n    opacity: 0;\n    -webkit-transition: opacity 0.5s;\n    transition: opacity 0.5s;\n    pointer-events: none;\n}\n.dial.has-leaf .dial__ico__leaf {\n    display: block;\n    opacity: 1;\n    pointer-events: initial;\n}\n.dial__editableIndicator {\n    fill-rule: evenodd;\n    opacity: 0;\n    -webkit-transition: opacity 0.5s;\n    transition: opacity 0.5s;\n}\n.dial--edit path.dial__editableIndicator {\n    fill: white;\n}\n.dial--edit .dial__editableIndicator {\n    opacity: 1;\n}\n.dial--state--off .dial__shape {\n    fill: #3d3c3c;\n}\n.dial--state--heating .dial__shape {\n    fill: #E36304;\n}\n.dial--state--cooling .dial__shape {\n    fill: #007AF1;\n}\n.dial .dial__ticks path {\n    fill: rgba(255, 255, 255, 0.3);\n}\n.dial .dial__ticks path.active {\n    fill: rgba(255, 255, 255, 0.8);\n}\n.dial text {\n    fill: white;\n    text-anchor: middle;\n    font-family: Helvetica, sans-serif;\n    alignment-baseline: central;\n}\n.dial__lbl--center {\n    font-size: 120px;\n    font-weight: bold;\n}\n.dial__lbl--centerlabel {\n  font-size: 16px;\n  font-weight: normal;\n  visibility: hidden;\n}\n.dial__lbl--center--half {\n    font-size: 40px;\n    font-weight: bold;\n    opacity: 0;\n    -webkit-transition: opacity 0.1s;\n    transition: opacity 0.1s;\n}\n.dial__lbl--center--half.shown {\n    opacity: 1;\n    -webkit-transition: opacity 0s;\n    transition: opacity 0s;\n}\n.dial__lbl--dial {\n    font-size: 22px;\n    font-weight: bold;\n}\n.dial__lbl--diallabel {\n  font-size: 16px;\n  font-weight: normal;\n}\n.dial__lbl--away {\n    font-size: 48px;\n    font-weight: bold;\n    opacity: 0;\n    pointer-events: none;\n}\n#controls {\n    font-family: Open Sans;\n    background-color: rgba(255, 255, 255, 0.25);\n    padding: 20px;\n    border-radius: 5px;\n    position: absolute;\n    left: 50%;\n    -webkit-transform: translatex(-50%);\n    transform: translatex(-50%);\n    margin-top: 20px;\n}\n#controls label {\n    text-align: left;\n    display: block;\n}\n#controls label span {\n    display: inline-block;\n    width: 200px;\n    text-align: right;\n    font-size: 0.8em;\n    text-transform: uppercase;\n}\n#controls p {\n    margin: 0;\n    margin-bottom: 1em;\n    padding-bottom: 1em;\n    border-bottom: 2px solid #ccc;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2280,
        "y": 860,
        "wires": [
            [
                "ad22893f29cab122",
                "0b4388fe437dbc83"
            ]
        ]
    },
    {
        "id": "fe827766f2deb360",
        "type": "inject",
        "z": "be3e27186d28303f",
        "g": "8402a4a5140ce140",
        "name": "20:30 Reset",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "30 20 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 1020,
        "y": 660,
        "wires": [
            [
                "0a2efea844b4a1eb"
            ]
        ]
    },
    {
        "id": "7f20cf59c5600f7a",
        "type": "ui_switch",
        "z": "be3e27186d28303f",
        "g": "8402a4a5140ce140",
        "name": "",
        "label": "1hr Hold",
        "tooltip": "",
        "group": "6e3f8970e878b45c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "manual_mode",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1360,
        "y": 660,
        "wires": [
            [
                "6c23698430a98ad4"
            ]
        ]
    },
    {
        "id": "6c23698430a98ad4",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "8402a4a5140ce140",
        "name": "translate",
        "func": "var msg1 = {}, msg2 = {}, msg3 = {};\nvar m1, m2, m3, stat;\nmsg2.topic = \"control\";\nmsg3.topic = \"control\";\n\n\nif (msg.payload === true) { // hold activated\n    m1 = \"START\";           // start hour timer\n    m2 = \"close\";           // close gate 1\n    m3 = \"open\";            // open gate 2\n\n    stat = \"running\";\n    flow.set(\"bed_timer\", stat);\n    node.status({fill:\"green\",shape:\"ring\",text: stat});\n\n    msg1.payload = m1;\n    msg2.payload = m2;\n    msg3.payload = m3;\n    return [msg1, msg2, msg3];\n} else if(msg.payload === false) {\n    flow.set(\"overide_bed\", false);\n    m2 = \"open\";\n    m3 = \"close\";\n\n    stat = \"stopped\";\n    flow.set(\"bed_timer\", stat);\n    node.status({fill:\"red\",shape:\"ring\",text: stat});\n\n    msg2.payload = m2;\n    msg3.payload = m3;\n    return [null, msg2, msg3];\n} else {\n    node.error(msg.payload);\n    return [];\n}\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nflow.set(\"bed_timer\", \"\");\nnode.status({ fill: \"grey\", shape: \"dot\", text: flow.get(\"bed_timer\") });\n",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 660,
        "wires": [
            [
                "d1a453bbf51a4337"
            ],
            [
                "6ab90a65a4bdfb52"
            ],
            [
                "d24b1067570cdb08"
            ]
        ]
    },
    {
        "id": "d1a453bbf51a4337",
        "type": "controltimer",
        "z": "be3e27186d28303f",
        "g": "8402a4a5140ce140",
        "name": "",
        "timerType": "delay",
        "timerDurationUnit": "minute",
        "timerDurationType": "num",
        "timerDuration": 10,
        "timerLoopTimeoutUnit": "second",
        "timerLoopTimeoutType": "num",
        "timerLoopTimeout": 0,
        "loopTimeoutMessageType": "str",
        "loopTimeoutMessage": "LOOP_TIMEOUT",
        "timerMaxLoopIterationsType": "num",
        "timerMaxLoopIterations": 0,
        "loopMaxIterationsMessageType": "str",
        "loopMaxIterationsMessage": "MAX_LOOP_ITERATIONS",
        "isRunningTimerProgressVisible": true,
        "outputReceivedMessageOnTimerTrigger": false,
        "outputReceivedMessageOnTimerHalt": false,
        "startTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfStartAction": false,
        "continueTimerOnReceivalOfStartAction": false,
        "isDebugModeEnabled": true,
        "timerTriggeredMessageType": "str",
        "timerTriggeredMessage": "TIMER_TRIGGERED",
        "timerHaltedMessageType": "str",
        "timerHaltedMessage": "TIMER_HALTED",
        "isStartActionEnabled": true,
        "isStopActionEnabled": false,
        "isResetActionEnabled": true,
        "isPauseActionEnabled": false,
        "isContinueActionEnabled": false,
        "actionPropertyNameType": "str",
        "actionPropertyName": "payload",
        "startActionNameType": "str",
        "startActionName": "START",
        "stopActionNameType": "str",
        "stopActionName": "STOP",
        "resetActionNameType": "str",
        "resetActionName": "RESET",
        "pauseActionNameType": "str",
        "pauseActionName": "PAUSE",
        "continueActionNameType": "str",
        "continueActionName": "CONTINUE",
        "x": 1700,
        "y": 660,
        "wires": [
            [
                "e25b6451879da94d"
            ],
            []
        ]
    },
    {
        "id": "e25b6451879da94d",
        "type": "change",
        "z": "be3e27186d28303f",
        "g": "8402a4a5140ce140",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "bed_timer",
                "pt": "flow",
                "to": "FINISHED",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1900,
        "y": 660,
        "wires": [
            [
                "7f20cf59c5600f7a"
            ]
        ]
    },
    {
        "id": "f81278da560d486e",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "8402a4a5140ce140",
        "name": "Locker",
        "func": "var msg1 = {}, msg2 = {};\n\n//node.warn(msg.payload);\n\nif (msg.payload == \"UI\") {\n    if (flow.get(\"bed_timer\") == \"running\") {\n        msg2.payload = \"RESET\";  \n    } else {\n        msg1.payload = true;\n        msg2.payload = \"START\";\n    }\n    return [msg1, msg2];    \n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 720,
        "wires": [
            [
                "0a2efea844b4a1eb"
            ],
            [
                "eafbd16e4ef3fc30"
            ]
        ]
    },
    {
        "id": "921379db2c9d47b7",
        "type": "link in",
        "z": "be3e27186d28303f",
        "g": "8402a4a5140ce140",
        "name": "den_router_in",
        "links": [
            "cb2a1e81e83b0b7c"
        ],
        "x": 935,
        "y": 720,
        "wires": [
            [
                "f81278da560d486e"
            ]
        ]
    },
    {
        "id": "0a2efea844b4a1eb",
        "type": "delay",
        "z": "be3e27186d28303f",
        "g": "8402a4a5140ce140",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1200,
        "y": 660,
        "wires": [
            [
                "7f20cf59c5600f7a"
            ]
        ]
    },
    {
        "id": "124ecbe9711473de",
        "type": "status",
        "z": "be3e27186d28303f",
        "g": "8402a4a5140ce140",
        "name": "",
        "scope": null,
        "x": 1760,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "c510a0d482bbd544",
        "type": "StatusUltimate",
        "z": "be3e27186d28303f",
        "g": "8402a4a5140ce140",
        "name": "Status",
        "property": "payload",
        "x": 1510,
        "y": 720,
        "wires": [
            [
                "d1a453bbf51a4337"
            ]
        ]
    },
    {
        "id": "6ab90a65a4bdfb52",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 1810,
        "y": 820,
        "wires": [
            [
                "7260d0de38036064"
            ]
        ]
    },
    {
        "id": "7260d0de38036064",
        "type": "delay",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "",
        "pauseType": "rate",
        "timeout": "15",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2020,
        "y": 820,
        "wires": [
            [
                "c5dc09fa515bf2a0"
            ]
        ]
    },
    {
        "id": "ad22893f29cab122",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "Router",
        "func": "// the internals\nvar outside, stat, hvac_state;\nvar nest_temp, nest_mode;\nvar minisplit_temp, minisplit_mode;\n\n// the inputs\nvar temp = msg.payload[\"target_temperature\"]; \nvar mode = msg.payload[\"hvac_mode\"];\nvar bias = flow.get(\"bias\");\nvar source = msg.payload[\"source\"];\n\n// the outputs\nvar lock = {};\nvar nest = {};          // heat or cool only\nvar minisplit = {};     // heat, cool or off\nvar generic = {};       // heat or cool only\nvar loop = {};          // original message with new topic\n\n// the clever bits\nif (source == \"UI\") {  // change the source lock\n    //node.warn(\"UI\");    \n    lock.payload = \"UI\";\n    } else if (source == \"loop\") {\n    //node.warn(\"loop\");\n    lock.payload = \"loop\";\n    } else {\n    //node.warn(\"brains\");\n    lock.payload = \"brains\";\n    }\n\nif (temp > flow.get(\"temp_bed\")) {\n    hvac_state = \"heating\";\n} else {\n    hvac_state = \"off\";\n}\n\nnest_temp = temp + bias;\nminisplit_temp = temp - bias;\nnest_mode = \"heat\";\nminisplit_mode = mode;\n\nnest.payload = {\n    data: {\n        \"temperature\": nest_temp,\n        \"hvac_mode\": nest_mode\n        }\n    };\n\nminisplit.payload = {\n\n    service: \"set_temperature\",\n    data: {\n        \"temperature\": minisplit_temp,\n        \"hvac_mode\": minisplit_mode,\n\n    }\n};\n\ngeneric.payload = {\n    data : {\n        \"temperature\": nest_temp,\n        \"hvac_mode\": nest_mode\n        }\n    }\n\nloop.payload = {\n    \"ambient_temperature\": flow.get(\"temp_bed\"),\n    \"target_temperature\": msg.payload[\"target_temperature\"],\n    \"hvac_state\": hvac_state,\n    \"hvac_mode\": msg.payload[\"hvac_mode\"],\n    \"has_leaf\": msg.payload[\"has_leaf\"],\n    \"away\": false,\n    \"source\": \"loop\"\n    }\n\nflow.set(\"bed_last\", loop.payload ); // used for reinjecting when on lock\n\nstat = \"nest: \"+ nest_temp+ \" / msp: \"+ minisplit_temp;\nnode.status({ fill: \"green\", shape: \"dot\", text: stat });\nreturn [lock, nest, minisplit, generic, loop];\n\n\n\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 860,
        "wires": [
            [
                "cb2a1e81e83b0b7c"
            ],
            [
                "79b122a64f2a954b"
            ],
            [
                "6de37a7250b2e6b1"
            ],
            [
                "988f17e67e385388"
            ],
            [
                "d24b1067570cdb08"
            ]
        ],
        "outputLabels": [
            "Nest",
            "MiniSplit",
            "Generic",
            "",
            ""
        ]
    },
    {
        "id": "6de37a7250b2e6b1",
        "type": "api-call-service",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "Climate - Bed MiniSplit",
        "server": "59355537.b6bb8c",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_temperature",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "climate.esphome_minisplit_bedroom"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2750,
        "y": 800,
        "wires": [
            [
                "4938635dcb977174"
            ]
        ]
    },
    {
        "id": "79b122a64f2a954b",
        "type": "api-call-service",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "Climate - Bedroom Nest",
        "server": "59355537.b6bb8c",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_temperature",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "climate.b1"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2790,
        "y": 680,
        "wires": [
            [
                "74ae62488aebfb9f"
            ]
        ]
    },
    {
        "id": "98aab72b918f1553",
        "type": "debug",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "generic input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3010,
        "y": 900,
        "wires": []
    },
    {
        "id": "4938635dcb977174",
        "type": "debug",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "minisplit input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2960,
        "y": 800,
        "wires": []
    },
    {
        "id": "74ae62488aebfb9f",
        "type": "debug",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "nest input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2980,
        "y": 680,
        "wires": []
    },
    {
        "id": "988f17e67e385388",
        "type": "api-call-service",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "Climate - Bed Generic",
        "server": "59355537.b6bb8c",
        "version": 5,
        "debugenabled": false,
        "domain": "climate",
        "service": "set_temperature",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "climate.mc_gen_th_bedroom"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "data"
            }
        ],
        "queue": "none",
        "x": 2800,
        "y": 900,
        "wires": [
            [
                "98aab72b918f1553"
            ]
        ]
    },
    {
        "id": "a596be957f21867f",
        "type": "inject",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "Nudge",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "bed_last",
        "payloadType": "flow",
        "x": 1560,
        "y": 880,
        "wires": [
            [
                "d24b1067570cdb08"
            ]
        ]
    },
    {
        "id": "d24b1067570cdb08",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 1810,
        "y": 880,
        "wires": [
            [
                "aeca61192b9839f4"
            ]
        ]
    },
    {
        "id": "aeca61192b9839f4",
        "type": "delay",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "",
        "pauseType": "rate",
        "timeout": "15",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2020,
        "y": 880,
        "wires": [
            [
                "c5dc09fa515bf2a0"
            ]
        ]
    },
    {
        "id": "238cc5d38791d2f5",
        "type": "comment",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "ESP Module Info",
        "info": "https://github.com/geoffdavis/esphome-mitsubishiheatpump",
        "x": 2780,
        "y": 760,
        "wires": []
    },
    {
        "id": "18b08e213ac9d99d",
        "type": "comment",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "ESP Module Info",
        "info": "https://github.com/geoffdavis/esphome-mitsubishiheatpump",
        "x": 2780,
        "y": 640,
        "wires": []
    },
    {
        "id": "f0f8e417c3b9c3db",
        "type": "comment",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "ESP Module Info",
        "info": "https://github.com/geoffdavis/esphome-mitsubishiheatpump",
        "x": 2820,
        "y": 860,
        "wires": []
    },
    {
        "id": "0b4388fe437dbc83",
        "type": "debug",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2430,
        "y": 740,
        "wires": []
    },
    {
        "id": "cb2a1e81e83b0b7c",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "den_router_out",
        "mode": "link",
        "links": [
            "921379db2c9d47b7"
        ],
        "x": 2595,
        "y": 720,
        "wires": []
    },
    {
        "id": "6b0bc5b5206f96de",
        "type": "comment",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "",
        "info": "[https://github.com/automatikas/Node-red-Nest-thermostat]()",
        "x": 2260,
        "y": 800,
        "wires": []
    },
    {
        "id": "a03662dde0a1aa27",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "72943fd661f0b29f",
        "name": "function 1",
        "func": "var msg2 = {};\n\nmsg2.topic = \"target\";\nmsg2.payload = msg.temp;\n\nreturn msg2;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 820,
        "wires": [
            [
                "5ea3f1b845d043db"
            ]
        ]
    },
    {
        "id": "507df67b155ba061",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "9afddc3717fe5ad5",
        "name": "function 2",
        "func": "var msg2 = {};\n\nmsg2.topic = \"target\";\nmsg2.payload = msg.temp;\n\nreturn msg2;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 440,
        "wires": [
            [
                "f4264a53af48da24"
            ]
        ]
    },
    {
        "id": "b63974e2eeb8ae66",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "Brains",
        "func": "var msg3 = {}; \nvar stat, outside, m3_mode, leaf;\n\nvar temp = msg.temp; // target temp\nvar mode = msg.mode;\n\n\nvar temp_office = flow.get(\"temp_office\"); // avg office temp\nvar outside = global.get(\"outside\");\n\nif ( outside > temp ) {\n    stat = \"hotter out [ \" + outside + \"] [\" + temp + \" ]\";\n    node.status({fill:\"red\",shape:\"ring\",text: stat});\n} else {\n    stat = \"colder out [\"+ outside +\"] [\"+ temp +\"]\";\n    node.status({ fill: \"blue\", shape: \"ring\", text: stat });\n}\n\nif (temp < 63 ) {\n    leaf = true;\n} else {\n    leaf = false;\n}\n\nif (mode == \"heat\") {\n    if (temp > temp_office) {\n        m3_mode = \"heating\";        \n    } else {\n        m3_mode = \"\";\n    }\n} else {\n    m3_mode = \"off\";\n}\n\nmsg3.payload = {\n    \"ambient_temperature\": temp_office,\n    \"target_temperature\": temp,\n    \"hvac_state\": m3_mode,\n    \"hvac_mode\": msg.mode,\n    \"has_leaf\": leaf,\n    \"away\": false,\n    \"source\": \"brains\"\n};\n\n\n\nreturn [msg3];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1200,
        "wires": [
            [
                "45c29a4ba59124d6"
            ]
        ],
        "outputLabels": [
            "temp"
        ]
    },
    {
        "id": "b3ff11d19935a2ac",
        "type": "ui_chart",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "",
        "group": "a6249749138f7170",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "History",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1400,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "a809b2fa8c4ceb08",
        "type": "ui_template",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "group": "a6249749138f7170",
        "name": "Nest style UI Widget",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "\n<div id=\"thermostat3\"></div>\n\n<script>\n    \n    var thermostatId = \"thermostat3\";\n\n    var thermostatDial = (function() {\n\t\n\t/*\n\t * Utility functions\n\t */\n\t\n\t// Create an element with proper SVG namespace, optionally setting its attributes and appending it to another element\n\tfunction createSVGElement(tag,attributes,appendTo) {\n\t\tvar element = document.createElementNS('http://www.w3.org/2000/svg',tag);\n\t\tattr(element,attributes);\n\t\tif (appendTo) {\n\t\t\tappendTo.appendChild(element);\n\t\t}\n\t\treturn element;\n\t}\n\t\n\t// Set attributes for an element\n\tfunction attr(element,attrs) {\n\t\tfor (var i in attrs) {\n\t\t\telement.setAttribute(i,attrs[i]);\n\t\t}\n\t}\n\t\n\t// Rotate a cartesian point about given origin by X degrees\n\tfunction rotatePoint(point, angle, origin) {\n\t\tvar radians = angle * Math.PI/180;\n\t\tvar x = point[0]-origin[0];\n\t\tvar y = point[1]-origin[1];\n\t\tvar x1 = x*Math.cos(radians) - y*Math.sin(radians) + origin[0];\n\t\tvar y1 = x*Math.sin(radians) + y*Math.cos(radians) + origin[1];\n\t\treturn [x1,y1];\n\t}\n\t\n\t// Rotate an array of cartesian points about a given origin by X degrees\n\tfunction rotatePoints(points, angle, origin) {\n\t\treturn points.map(function(point) {\n\t\t\treturn rotatePoint(point, angle, origin);\n\t\t});\n\t}\n\t\n\t// Given an array of points, return an SVG path string representing the shape they define\n\tfunction pointsToPath(points) {\n\t\treturn points.map(function(point, iPoint) {\n\t\t\treturn (iPoint>0?'L':'M') + point[0] + ' ' + point[1];\n\t\t}).join(' ')+'Z';\n\t}\n\t\n\tfunction circleToPath(cx, cy, r) {\n\t\treturn [\n\t\t\t\"M\",cx,\",\",cy,\n\t\t\t\"m\",0-r,\",\",0,\n\t\t\t\"a\",r,\",\",r,0,1,\",\",0,r*2,\",\",0,\n\t\t\t\"a\",r,\",\",r,0,1,\",\",0,0-r*2,\",\",0,\n\t\t\t\"z\"\n\t\t].join(' ').replace(/\\s,\\s/g,\",\");\n\t}\n\t\n\tfunction donutPath(cx,cy,rOuter,rInner) {\n\t\treturn circleToPath(cx,cy,rOuter) + \" \" + circleToPath(cx,cy,rInner);\n\t}\n\t\n\t// Restrict a number to a min + max range\n\tfunction restrictToRange(val,min,max) {\n\t\tif (val < min) return min;\n\t\tif (val > max) return max;\n\t\treturn val;\n\t}\n\t\n\t// Round a number to the nearest 0.5\n\tfunction roundHalf(num) {\n\t\treturn Math.round(num*2)/2;\n\t}\n\t\n\t// Round a number to the nearest 0.1\n\tfunction roundTenth(num) {\n\t\treturn Math.round(num*10)/10;\n\t}\n\t\n\tfunction setClass(el, className, state) {\n\t\tel.classList[state ? 'add' : 'remove'](className);\n\t}\n\t\n\t/*\n\t * The \"MEAT\"\n\t */\n\n\treturn function(targetElement, options) {\n\t\tvar self = this;\n\t\t\n\t\t/*\n\t\t * Options\n\t\t */\n\t\toptions = options || {};\n\t\toptions = {\n\t\t    targetOnCenter: options.targetOnCenter || true, //Display target temperature in center of dial. Otherwise, display ambient temperature\n\t\t\tdiameter: options.diameter || 400,\n\t\t\tminValue: options.minValue || 50, // Minimum value for target temperature\n\t\t\tmaxValue: options.maxValue || 90, // Maximum value for target temperature\n\t\t\tnumTicks: options.numTicks || 200, // Number of tick lines to display around the dial\n\t\t\tonSetTargetTemperature: options.onSetTargetTemperature || function() {}, // Function called when new target temperature set by the dial\n\t\t};\n\t\t\n\t\t/*\n\t\t * Properties - calculated from options in many cases\n\t\t */\n\t\tvar properties = {\n\t\t\ttickDegrees: 300, // Degrees of the dial that should be covered in tick lines\n\t\t\trangeValue: options.maxValue - options.minValue,\n\t\t\tradius: options.diameter/2,\n\t\t\tticksOuterRadius: options.diameter / 30,\n\t\t\tticksInnerRadius: options.diameter / 8,\n\t\t\thvac_states: ['off', 'heating', 'cooling'],\n\t\t\tdragLockAxisDistance: 15,\n\t\t\tlabels: {\n                targetLabel: 'Set',\n                ambientUnits: 'ºF'\n\t\t\t}\n\t\t}\n\t\tproperties.lblDialPosition = [properties.radius, properties.ticksOuterRadius-(properties.ticksOuterRadius-properties.ticksInnerRadius)/2]\n\t\tproperties.offsetDegrees = 180-(360-properties.tickDegrees)/2;\n\t\t\n\t\t/*\n\t\t * Object state\n\t\t */\n\t\tvar state = {\n\t\t\ttarget_temperature: options.minValue,\n\t\t\tambient_temperature: options.minValue,\n\t\t\thvac_state: properties.hvac_states[0],\n\t\t\thas_leaf: false,\n\t\t\taway: false\n\t\t};\n\t\t\n\t\t/*\n\t\t * Property getter / setters\n\t\t */\n\t\tObject.defineProperty(this,'target_temperature',{\n\t\t\tget: function() {\n\t\t\t\treturn state.target_temperature;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tstate.target_temperature = restrictTargetTemperature(+val);\n\t\t\t\trender();\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(this,'ambient_temperature',{\n\t\t\tget: function() {\n\t\t\t\treturn state.ambient_temperature;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t    if (options.targetOnCenter)\n\t\t\t\t    state.ambient_temperature = roundHalf(+val);\n\t\t\t\telse\n\t\t\t\t    state.ambient_temperature = roundTenth(+val);\n\t\t\t\trender();\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(this,'hvac_state',{\n\t\t\tget: function() {\n\t\t\t\treturn state.hvac_state;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tif (properties.hvac_states.indexOf(val)>=0) {\n\t\t\t\t\tstate.hvac_state = val;\n\t\t\t\t\trender();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tfunction str2bool(strvalue){\n          return (strvalue && typeof strvalue == 'string') ? (strvalue.toLowerCase() == 'true') : (strvalue == true);\n        }\n\t\tObject.defineProperty(this,'has_leaf',{\n\t\t\tget: function() {\n\t\t\t\treturn state.has_leaf;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tstate.has_leaf = !!str2bool(val);\n\t\t\t\trender();\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(this,'away',{\n\t\t\tget: function() {\n\t\t\t\treturn state.away;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tstate.away = !!str2bool(val);\n\t\t\t\trender();\n\t\t\t}\n\t\t});\n\t\t\n\t\t/*\n\t\t * SVG\n\t\t */\n\t\tvar svg = createSVGElement('svg',{\n\t\t\twidth: '95%', //options.diameter+'px',\n\t\t\theight: '95%', //options.diameter+'px',\n\t\t\tviewBox: '0 0 '+options.diameter+' '+options.diameter,\n\t\t\tclass: 'dial'\n\t\t},targetElement);\n\t\t// CIRCULAR DIAL\n\t\tvar circle = createSVGElement('circle',{\n\t\t\tcx: properties.radius,\n\t\t\tcy: properties.radius,\n\t\t\tr: properties.radius,\n\t\t\tclass: 'dial__shape'\n\t\t},svg);\n\t\t// EDITABLE INDICATOR\n\t\tvar editCircle = createSVGElement('path',{\n\t\t\td: donutPath(properties.radius,properties.radius,properties.radius-4,properties.radius-8),\n\t\t\tclass: 'dial__editableIndicator',\n\t\t},svg);\n\t\t\n\t\t/*\n\t\t * Ticks\n\t\t */\n\t\tvar ticks = createSVGElement('g',{\n\t\t\tclass: 'dial__ticks'\t\n\t\t},svg);\n\t\tvar tickPoints = [\n\t\t\t[properties.radius-1, properties.ticksOuterRadius],\n\t\t\t[properties.radius+1, properties.ticksOuterRadius],\n\t\t\t[properties.radius+1, properties.ticksInnerRadius],\n\t\t\t[properties.radius-1, properties.ticksInnerRadius]\n\t\t];\n\t\tvar tickPointsLarge = [\n\t\t\t[properties.radius-1.5, properties.ticksOuterRadius],\n\t\t\t[properties.radius+1.5, properties.ticksOuterRadius],\n\t\t\t[properties.radius+1.5, properties.ticksInnerRadius+20],\n\t\t\t[properties.radius-1.5, properties.ticksInnerRadius+20]\n\t\t];\n\t\tvar theta = properties.tickDegrees/options.numTicks;\n\t\tvar tickArray = [];\n\t\tfor (var iTick=0; iTick<options.numTicks; iTick++) {\n\t\t\ttickArray.push(createSVGElement('path',{d:pointsToPath(tickPoints)},ticks));\n\t\t};\n\t\t\n\t\t/*\n\t\t * Labels\n\t\t */\n\t\tvar lblCenter = createSVGElement('text',{\n\t\t\tx: properties.radius,\n\t\t\ty: properties.radius,\n\t\t\tclass: 'dial__lbl dial__lbl--center'\n\t\t},svg);\n\t\tvar lblCenter_text = document.createTextNode('');\n\t\tlblCenter.appendChild(lblCenter_text);\n\t\t//\n\t\tvar lblCenterHalf = createSVGElement('text',{\n\t\t\tx: properties.radius + properties.radius/2.5,\n\t\t\ty: properties.radius - properties.radius/8,\n\t\t\tclass: 'dial__lbl dial__lbl--center--half'\n\t\t},svg);\n\t\tvar lblCenterHalf_text = document.createTextNode('0');\n\t\tlblCenterHalf.appendChild(lblCenterHalf_text);\n\t\t//\n\t\tvar lblCenterlabel = createSVGElement('text', {\n          x: properties.radius,\n          y: properties.radius - properties.radius / 2,\n          class: 'dial__lbl dial__lbl--centerlabel'\n        }, svg);\n        var lblCenterlabel_text = document.createTextNode(properties.labels.targetLabel);\n        lblCenterlabel.appendChild(lblCenterlabel_text);\n        //\n\t\tvar lblDial = createSVGElement('text',{\n\t\t\tclass: 'dial__lbl dial__lbl--dial'\n\t\t},svg);\n\t\tvar lblDial_text = document.createTextNode('');\n\t\tlblDial.appendChild(lblDial_text);\n\t\t//\n\t\tvar lblDialUnits = createSVGElement('text', {\n          x: properties.radius,\n          y: properties.radius + properties.radius / 5,\n          class: 'dial__lbl dial__lbl--dial--units'\n        }, svg);\n        var lblDial_units = document.createTextNode(properties.labels.ambientUnits);\n        lblDialUnits.appendChild(lblDial_units);\n        //\n\t\tvar lblAway = createSVGElement('text',{\n\t\t\tx: properties.radius,\n\t\t\ty: properties.radius * 1.5,\n\t\t\tclass: 'dial__lbl dial__lbl--away'\n\t\t},svg);\n\t\tvar lblAway_text = document.createTextNode('AWAY');\n\t\tlblAway.appendChild(lblAway_text);\n\t\t//\n\t\tvar icoLeaf = createSVGElement('path',{\n\t\t\tclass: 'dial__ico__leaf'\n\t\t},svg);\n\t\t\n\t\t/*\n\t\t * LEAF\n\t\t */\n\t\tvar leafScale = properties.radius/5/100;\n\t\tvar leafDef = [\"M\", 3, 84, \"c\", 24, 17, 51, 18, 73, -6, \"C\", 100, 52, 100, 22, 100, 4, \"c\", -13, 15, -37, 9, -70, 19, \"C\", 4, 32, 0, 63, 0, 76, \"c\", 6, -7, 18, -17, 33, -23, 24, -9, 34, -9, 48, -20, -9, 10, -20, 16, -43, 24, \"C\", 22, 63, 8, 78, 3, 84, \"z\"].map(function(x) {\n\t\t\treturn isNaN(x) ? x : x*leafScale;\n\t\t}).join(' ');\n\t\tvar translate = [properties.radius-(leafScale*100*0.5),properties.radius*1.5]\n\t\tvar icoLeaf = createSVGElement('path',{\n\t\t\tclass: 'dial__ico__leaf',\n\t\t\td: leafDef,\n\t\t\ttransform: 'translate('+translate[0]+','+translate[1]+')'\n\t\t},svg);\n\t\t\t\n\t\t/*\n\t\t * RENDER\n\t\t */\n\t\tfunction render() {\n\t\t\trenderAway();\n\t\t\trenderHvacState();\n\t\t\trenderTicks();\n\t\t\trenderCenterTemperature();\n\t\t\trenderDialTemperature();\n\t\t\trenderLeaf();\n\t\t}\n\t\trender();\n\n\t\t/*\n\t\t * RENDER - ticks\n\t\t */\n\t\tfunction renderTicks() {\n\t\t\tvar vMin, vMax;\n\t\t\tif (self.away) {\n\t\t\t    vMin = (options.targetOnCenter ? self.ambient_temperature : self.target_temperature); \n\t\t\t\tvMax = vMin;\n\t\t\t} else {\n\t\t\t\tvMin = Math.min(self.ambient_temperature, self.target_temperature);\n\t\t\t\tvMax = Math.max(self.ambient_temperature, self.target_temperature);\n\t\t\t}\n\t\t\tvar min = restrictToRange(Math.round((vMin-options.minValue)/properties.rangeValue * options.numTicks),0,options.numTicks-1);\n\t\t\tvar max = restrictToRange(Math.round((vMax-options.minValue)/properties.rangeValue * options.numTicks),0,options.numTicks-1);\n\t\t\t//\n\t\t\ttickArray.forEach(function(tick,iTick) {\n\t\t\t\tvar isLarge = iTick==min || iTick==max;\n\t\t\t\tvar isActive = iTick >= min && iTick <= max;\n\t\t\t\tattr(tick,{\n\t\t\t\t\td: pointsToPath(rotatePoints(isLarge ? tickPointsLarge: tickPoints,iTick*theta-properties.offsetDegrees,[properties.radius, properties.radius])),\n\t\t\t\t\tclass: isActive ? 'active' : ''\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\n\t\t/*\n\t\t * RENDER - dial temperature\n\t\t */\n\t\tfunction renderDialTemperature() {\n\t\t    var valueToRender = (options.targetOnCenter ? self.ambient_temperature : self.target_temperature);\n\t\t    var valueRenderedInCenter = (options.targetOnCenter ? self.target_temperature : self.ambient_temperature);\n\t\t\tlblDial_text.nodeValue = Math.floor(valueToRender);\n\t\t\tif (valueToRender%1!=0) {\n\t\t\t\tlblDial_text.nodeValue += '⁵';\n\t\t\t}\n\t\t\tvar peggedValue = restrictToRange(valueToRender, options.minValue, options.maxValue);\n\t\t\tdegs = properties.tickDegrees * (peggedValue-options.minValue)/properties.rangeValue - properties.offsetDegrees;\n\t\t\tif (peggedValue > valueRenderedInCenter) {\n\t\t\t\tdegs += 8;\n\t\t\t} else {\n\t\t\t\tdegs -= 8;\n\t\t\t}\n\t\t\tvar pos = rotatePoint(properties.lblDialPosition,degs,[properties.radius, properties.radius]);\n\t\t\tattr(lblDial,{\n\t\t\t\tx: pos[0],\n\t\t\t\ty: pos[1]\n\t\t\t});\n\t\t}\n\n\t\t/*\n\t\t * RENDER - center temperature\n\t\t */\n\t\tfunction renderCenterTemperature() {\n\t\t    \n\t\t    var valueToRender = (options.targetOnCenter ? self.target_temperature: self.ambient_temperature);\n\t\t\tlblCenter_text.nodeValue = Math.floor(valueToRender);\n\t\t\tsetClass(lblCenterHalf,'shown',true);\n\t\t    lblCenterHalf_text.nodeValue = (valueToRender*10)%10;\n\t\t}\n\t\t\n\t\t/*\n\t\t * RENDER - leaf\n\t\t */\n\t\tfunction renderLeaf() {\n\t\t\tsetClass(svg,'has-leaf',self.has_leaf);\n\t\t}\n\t\t\n\t\t/*\n\t\t * RENDER - HVAC state\n\t\t */\n\t\tfunction renderHvacState() {\n\t\t\tArray.prototype.slice.call(svg.classList).forEach(function(c) {\n\t\t\t\tif (c.match(/^dial--state--/)) {\n\t\t\t\t\tsvg.classList.remove(c);\n\t\t\t\t};\n\t\t\t});\n\t\t\tsvg.classList.add('dial--state--'+self.hvac_state);\n\t\t}\n\t\t\n\t\t/*\n\t\t * RENDER - away\n\t\t */\n\t\tfunction renderAway() {\n\t\t\tsvg.classList[self.away ? 'add' : 'remove']('away');\n\t\t}\n\t\t\n\t\t/*\n\t\t * Drag to control\n\t\t */\n\t\tvar _drag = {\n\t\t\tinProgress: false,\n\t\t\tstartPoint: null,\n\t\t\tstartTemperature: 0,\n\t\t\tlockAxis: undefined\n\t\t};\n\t\t\n\t\tfunction eventPosition(ev) {\n\t\t\tif (ev.targetTouches && ev.targetTouches.length) {\n\t\t\t\treturn [ev.targetTouches[0].clientX, ev.targetTouches[0].clientY];\n\t\t\t} else {\n\t\t\t\treturn [ev.x, ev.y];\n\t\t\t};\n\t\t}\n\t\t\n\t\tvar startDelay;\n\t\tfunction dragStart(ev) {\n\t\t\tstartDelay = setTimeout(function() {\n\t\t\t\tsetClass(svg, 'dial--edit', true);\n\t\t\t\t_drag.inProgress = true;\n\t\t\t\t_drag.startPoint = eventPosition(ev);\n\t\t\t\t_drag.startTemperature = self.target_temperature || options.minValue;\n\t\t\t\t_drag.lockAxis = undefined;\n\t\t\t},500);\n\t\t};\n\t\t\n\t\tfunction dragEnd (ev) {\n\t\t\tclearTimeout(startDelay);\n\t\t\tsetClass(svg, 'dial--edit', false);\n\t\t\tif (!_drag.inProgress) return;\n\t\t\t_drag.inProgress = false;\n\t\t\tif (self.target_temperature != _drag.startTemperature) {\n\t\t\t\tif (typeof options.onSetTargetTemperature == 'function') {\n\t\t\t\t\toptions.onSetTargetTemperature(self.target_temperature);\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\tfunction dragMove(ev) {\n\t\t\tev.preventDefault();\n\t\t\tif (!_drag.inProgress) return;\n\t\t\tvar evPos = eventPosition(ev);\n\t\t\tvar dy = _drag.startPoint[1]-evPos[1];\n\t\t\tvar dx = evPos[0] - _drag.startPoint[0];\n\t\t\tvar dxy;\n\t\t\tif (_drag.lockAxis == 'x') {\n\t\t\t\tdxy = dx;\n\t\t\t} else if (_drag.lockAxis == 'y') {\n\t\t\t\tdxy = dy;\n\t\t\t} else if (Math.abs(dy) > properties.dragLockAxisDistance) {\n\t\t\t\t_drag.lockAxis = 'y';\n\t\t\t\tdxy = dy;\n\t\t\t} else if (Math.abs(dx) > properties.dragLockAxisDistance) {\n\t\t\t\t_drag.lockAxis = 'x';\n\t\t\t\tdxy = dx;\n\t\t\t} else {\n\t\t\t\tdxy = (Math.abs(dy) > Math.abs(dx)) ? dy : dx;\n\t\t\t};\n\t\t\tvar dValue = (dxy*getSizeRatio())/(options.diameter)*properties.rangeValue;\n\t\t\tself.target_temperature = roundHalf(_drag.startTemperature+dValue);\n\t\t}\n\t\t\n\t\tsvg.addEventListener('mousedown',dragStart);\n\t\tsvg.addEventListener('touchstart',dragStart);\n\t\t\n\t\tsvg.addEventListener('mouseup',dragEnd);\n\t\tsvg.addEventListener('mouseleave',dragEnd);\n\t\tsvg.addEventListener('touchend',dragEnd);\n\t\t\n\t\tsvg.addEventListener('mousemove',dragMove);\n\t\tsvg.addEventListener('touchmove',dragMove);\n\t\t//\n\t\t\n\t\t/*\n\t\t * Helper functions\n\t\t */\n\t\tfunction restrictTargetTemperature(t) {\n\t\t\treturn restrictToRange(roundHalf(t),options.minValue,options.maxValue);\n\t\t}\n\t\t\n\t\tfunction angle(point) {\n\t\t\tvar dx = point[0] - properties.radius;\n\t\t\tvar dy = point[1] - properties.radius;\n\t\t\tvar theta = Math.atan(dx/dy) / (Math.PI/180);\n\t\t\tif (point[0]>=properties.radius && point[1] < properties.radius) {\n\t\t\t\ttheta = 90-theta - 90;\n\t\t\t} else if (point[0]>=properties.radius && point[1] >= properties.radius) {\n\t\t\t\ttheta = 90-theta + 90;\n\t\t\t} else if (point[0]<properties.radius && point[1] >= properties.radius) {\n\t\t\t\ttheta = 90-theta + 90;\n\t\t\t} else if (point[0]<properties.radius && point[1] < properties.radius) {\n\t\t\t\ttheta = 90-theta+270;\n\t\t\t}\n\t\t\treturn theta;\n\t\t};\n\t\t\n\t\tfunction getSizeRatio() {\n\t\t\treturn options.diameter / targetElement.clientWidth;\n\t\t}\n\t\t\n\t};\n})();\n\n/* ==== */\nvar initializing = true;\n\n(function(scope) {\n    var nest = new thermostatDial(document.getElementById(thermostatId),{\n    \tonSetTargetTemperature: function(v) {\n    \t    var p = {\n    \t        \"ambient_temperature\":nest.ambient_temperature,\n    \t        \"target_temperature\":v,\n    \t        \"hvac_state\":nest.hvac_state,\n    \t        \"has_leaf\": nest.has_leaf,\n    \t        \"away\":nest.away,\n\t\t\t\t\"source\": \"UI\"\n    \t    };\n    \t\tscope.send({topic: thermostatId, payload: p});\n    \t}\n    });\n    \n    scope.$watch('msg', function(data) {\n        if (initializing) {\n            initializing = false;\n            } else {\n            nest.ambient_temperature = data.payload.ambient_temperature || 0;\n            nest.target_temperature = data.payload.target_temperature || 0;\n            nest.hvac_state = data.payload.hvac_state || \"off\";\n            nest.has_leaf = data.payload.has_leaf || false;\n            nest.away = data.payload.away || false;\n        }\n        \n    });\n})(scope);\n\n</script>\n\n<style>\n\n@import url(http://fonts.googleapis.com/css?family=Open+Sans:300);\n\n#thermostat {\n margin: 0 auto;\n -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n.dial {\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n.dial.away .dial__ico__leaf {\n    visibility: hidden;\n}\n.dial.away .dial__lbl--target {\n    visibility: hidden;\n}\n.dial.away .dial__lbl--target--half {\n    visibility: hidden;\n}\n.dial.away .dial__lbl--away {\n    opacity: 1;\n}\n.dial--edit .dial__lbl--diallabel {\n  visibility: hidden;\n}\n.dial--edit .dial__lbl--centerlabel {\n  visibility: visible;\n}\n.dial .dial__shape {\n    -webkit-transition: fill 0.5s;\n    transition: fill 0.5s;\n}\n.dial path.dial__ico__leaf {\n    fill: #13EB13;\n    opacity: 0;\n    -webkit-transition: opacity 0.5s;\n    transition: opacity 0.5s;\n    pointer-events: none;\n}\n.dial.has-leaf .dial__ico__leaf {\n    display: block;\n    opacity: 1;\n    pointer-events: initial;\n}\n.dial__editableIndicator {\n    fill-rule: evenodd;\n    opacity: 0;\n    -webkit-transition: opacity 0.5s;\n    transition: opacity 0.5s;\n}\n.dial--edit path.dial__editableIndicator {\n    fill: white;\n}\n.dial--edit .dial__editableIndicator {\n    opacity: 1;\n}\n.dial--state--off .dial__shape {\n    fill: #3d3c3c;\n}\n.dial--state--heating .dial__shape {\n    fill: #E36304;\n}\n.dial--state--cooling .dial__shape {\n    fill: #007AF1;\n}\n.dial .dial__ticks path {\n    fill: rgba(255, 255, 255, 0.3);\n}\n.dial .dial__ticks path.active {\n    fill: rgba(255, 255, 255, 0.8);\n}\n.dial text {\n    fill: white;\n    text-anchor: middle;\n    font-family: Helvetica, sans-serif;\n    alignment-baseline: central;\n}\n.dial__lbl--center {\n    font-size: 120px;\n    font-weight: bold;\n}\n.dial__lbl--centerlabel {\n  font-size: 16px;\n  font-weight: normal;\n  visibility: hidden;\n}\n.dial__lbl--center--half {\n    font-size: 40px;\n    font-weight: bold;\n    opacity: 0;\n    -webkit-transition: opacity 0.1s;\n    transition: opacity 0.1s;\n}\n.dial__lbl--center--half.shown {\n    opacity: 1;\n    -webkit-transition: opacity 0s;\n    transition: opacity 0s;\n}\n.dial__lbl--dial {\n    font-size: 22px;\n    font-weight: bold;\n}\n.dial__lbl--diallabel {\n  font-size: 16px;\n  font-weight: normal;\n}\n.dial__lbl--away {\n    font-size: 48px;\n    font-weight: bold;\n    opacity: 0;\n    pointer-events: none;\n}\n#controls {\n    font-family: Open Sans;\n    background-color: rgba(255, 255, 255, 0.25);\n    padding: 20px;\n    border-radius: 5px;\n    position: absolute;\n    left: 50%;\n    -webkit-transform: translatex(-50%);\n    transform: translatex(-50%);\n    margin-top: 20px;\n}\n#controls label {\n    text-align: left;\n    display: block;\n}\n#controls label span {\n    display: inline-block;\n    width: 200px;\n    text-align: right;\n    font-size: 0.8em;\n    text-transform: uppercase;\n}\n#controls p {\n    margin: 0;\n    margin-bottom: 1em;\n    padding-bottom: 1em;\n    border-bottom: 2px solid #ccc;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2280,
        "y": 1240,
        "wires": [
            [
                "edfdb23e02c20555",
                "a9d2c5b76e18e528"
            ]
        ]
    },
    {
        "id": "307f9c925b498375",
        "type": "inject",
        "z": "be3e27186d28303f",
        "g": "8dd45a924ce3d247",
        "name": "20:30 Reset",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "30 20 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 1020,
        "y": 1040,
        "wires": [
            [
                "f239ef16f8e42b8b"
            ]
        ]
    },
    {
        "id": "be67395f244b53cd",
        "type": "ui_switch",
        "z": "be3e27186d28303f",
        "g": "8dd45a924ce3d247",
        "name": "",
        "label": "1hr Hold",
        "tooltip": "",
        "group": "a6249749138f7170",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "manual_mode",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1360,
        "y": 1040,
        "wires": [
            [
                "5ede15c2f8fa649e"
            ]
        ]
    },
    {
        "id": "5ede15c2f8fa649e",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "8dd45a924ce3d247",
        "name": "translate",
        "func": "var msg1 = {}, msg2 = {}, msg3 = {};\nvar m1, m2, m3, stat;\nmsg2.topic = \"control\";\nmsg3.topic = \"control\";\n\n\nif (msg.payload === true) { // hold activated\n    m1 = \"START\";           // start hour timer\n    m2 = \"close\";           // close gate 1\n    m3 = \"open\";            // open gate 2\n\n    stat = \"running\";\n    flow.set(\"bed_timer\", stat);\n    node.status({fill:\"green\",shape:\"ring\",text: stat});\n\n    msg1.payload = m1;\n    msg2.payload = m2;\n    msg3.payload = m3;\n    return [msg1, msg2, msg3];\n} else if(msg.payload === false) {\n    flow.set(\"overide_bed\", false);\n    m2 = \"open\";\n    m3 = \"close\";\n\n    stat = \"stopped\";\n    flow.set(\"bed_timer\", stat);\n    node.status({fill:\"red\",shape:\"ring\",text: stat});\n\n    msg2.payload = m2;\n    msg3.payload = m3;\n    return [null, msg2, msg3];\n} else {\n    node.error(msg.payload);\n    return [];\n}\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nflow.set(\"office_timer\", \"\");\nnode.status({ fill: \"grey\", shape: \"dot\", text: flow.get(\"office_timer\") });\n",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1040,
        "wires": [
            [
                "302da9b3705febe3"
            ],
            [
                "45c29a4ba59124d6"
            ],
            [
                "e92595fc488a60b1"
            ]
        ]
    },
    {
        "id": "302da9b3705febe3",
        "type": "controltimer",
        "z": "be3e27186d28303f",
        "g": "8dd45a924ce3d247",
        "name": "",
        "timerType": "delay",
        "timerDurationUnit": "minute",
        "timerDurationType": "num",
        "timerDuration": 10,
        "timerLoopTimeoutUnit": "second",
        "timerLoopTimeoutType": "num",
        "timerLoopTimeout": 0,
        "loopTimeoutMessageType": "str",
        "loopTimeoutMessage": "LOOP_TIMEOUT",
        "timerMaxLoopIterationsType": "num",
        "timerMaxLoopIterations": 0,
        "loopMaxIterationsMessageType": "str",
        "loopMaxIterationsMessage": "MAX_LOOP_ITERATIONS",
        "isRunningTimerProgressVisible": true,
        "outputReceivedMessageOnTimerTrigger": false,
        "outputReceivedMessageOnTimerHalt": false,
        "startTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfUnknownMessage": false,
        "resetTimerOnReceivalOfStartAction": false,
        "continueTimerOnReceivalOfStartAction": false,
        "isDebugModeEnabled": true,
        "timerTriggeredMessageType": "str",
        "timerTriggeredMessage": "TIMER_TRIGGERED",
        "timerHaltedMessageType": "str",
        "timerHaltedMessage": "TIMER_HALTED",
        "isStartActionEnabled": true,
        "isStopActionEnabled": false,
        "isResetActionEnabled": true,
        "isPauseActionEnabled": false,
        "isContinueActionEnabled": false,
        "actionPropertyNameType": "str",
        "actionPropertyName": "payload",
        "startActionNameType": "str",
        "startActionName": "START",
        "stopActionNameType": "str",
        "stopActionName": "STOP",
        "resetActionNameType": "str",
        "resetActionName": "RESET",
        "pauseActionNameType": "str",
        "pauseActionName": "PAUSE",
        "continueActionNameType": "str",
        "continueActionName": "CONTINUE",
        "x": 1700,
        "y": 1040,
        "wires": [
            [
                "dfd93c60a8c62570"
            ],
            []
        ]
    },
    {
        "id": "dfd93c60a8c62570",
        "type": "change",
        "z": "be3e27186d28303f",
        "g": "8dd45a924ce3d247",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "office_timer",
                "pt": "flow",
                "to": "FINISHED",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1900,
        "y": 1040,
        "wires": [
            [
                "be67395f244b53cd"
            ]
        ]
    },
    {
        "id": "5171f137b86455f6",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "8dd45a924ce3d247",
        "name": "Locker",
        "func": "var msg1 = {}, msg2 = {};\n\n//node.warn(msg.payload);\n\nif (msg.payload == \"UI\") {\n    if (flow.get(\"office_timer\") == \"running\") {\n        msg2.payload = \"RESET\";  \n    } else {\n        msg1.payload = true;\n        msg2.payload = \"START\";\n    }\n    return [msg1, msg2];    \n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1100,
        "wires": [
            [
                "f239ef16f8e42b8b"
            ],
            [
                "bd7b16fd5744aba1"
            ]
        ]
    },
    {
        "id": "e02684c8adf67bba",
        "type": "link in",
        "z": "be3e27186d28303f",
        "g": "8dd45a924ce3d247",
        "name": "den_router_in",
        "links": [
            "28e9c28352f9d7e2"
        ],
        "x": 935,
        "y": 1100,
        "wires": [
            [
                "5171f137b86455f6"
            ]
        ]
    },
    {
        "id": "f239ef16f8e42b8b",
        "type": "delay",
        "z": "be3e27186d28303f",
        "g": "8dd45a924ce3d247",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1200,
        "y": 1040,
        "wires": [
            [
                "be67395f244b53cd"
            ]
        ]
    },
    {
        "id": "4409ee8c9888c248",
        "type": "status",
        "z": "be3e27186d28303f",
        "g": "8dd45a924ce3d247",
        "name": "",
        "scope": null,
        "x": 1760,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "5c7cc42cea5a3bb5",
        "type": "StatusUltimate",
        "z": "be3e27186d28303f",
        "g": "8dd45a924ce3d247",
        "name": "Status",
        "property": "payload",
        "x": 1510,
        "y": 1100,
        "wires": [
            [
                "302da9b3705febe3"
            ]
        ]
    },
    {
        "id": "45c29a4ba59124d6",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 1810,
        "y": 1200,
        "wires": [
            [
                "263a3faad4e06189"
            ]
        ]
    },
    {
        "id": "263a3faad4e06189",
        "type": "delay",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "",
        "pauseType": "rate",
        "timeout": "15",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2020,
        "y": 1200,
        "wires": [
            [
                "a809b2fa8c4ceb08"
            ]
        ]
    },
    {
        "id": "edfdb23e02c20555",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "Router",
        "func": "// the internals\nvar outside, stat, hvac_state;\nvar nest_temp, nest_mode;\nvar minisplit_temp, minisplit_mode;\n\n// the inputs\nvar temp = msg.payload[\"target_temperature\"]; \nvar mode = msg.payload[\"hvac_mode\"];\nvar bias = flow.get(\"bias\");\nvar source = msg.payload[\"source\"];\n\n// the outputs\nvar lock = {};\nvar nest = {};          // heat or cool only\nvar minisplit = {};     // heat, cool or off\nvar generic = {};       // heat or cool only\nvar loop = {};          // original message with new topic\n\n// the clever bits\nif (source == \"UI\") {  // change the source lock\n    //node.warn(\"UI\");    \n    lock.payload = \"UI\";\n    } else if (source == \"loop\") {\n    //node.warn(\"loop\");\n    lock.payload = \"loop\";\n    } else {\n    //node.warn(\"brains\");\n    lock.payload = \"brains\";\n    }\n\nif (temp > flow.get(\"temp_office\")) {\n    hvac_state = \"heating\";\n} else {\n    hvac_state = \"off\";\n}\n\nnest_temp = temp + bias;\nminisplit_temp = temp - bias;\nnest_mode = \"heat\";\nminisplit_mode = mode;\n\nnest.payload = {\n    data: {\n        \"temperature\": nest_temp,\n        \"hvac_mode\": nest_mode\n        }\n    };\n\nminisplit.payload = {\n\n    service: \"set_temperature\",\n    data: {\n        \"temperature\": minisplit_temp,\n        \"hvac_mode\": minisplit_mode,\n\n        }\n    };\n\ngeneric.payload = {\n    data : {\n        \"temperature\": nest_temp,\n        \"hvac_mode\": nest_mode\n      }\n    };\n\nloop.payload = {\n    \"ambient_temperature\": flow.get(\"temp_office\"),\n    \"target_temperature\": msg.payload[\"target_temperature\"],\n    \"hvac_state\": hvac_state,\n    \"hvac_mode\": msg.payload[\"hvac_mode\"],\n    \"has_leaf\": msg.payload[\"has_leaf\"],\n    \"away\": false,\n    \"source\": \"loop\"\n    }\n\nflow.set(\"office_last\", loop.payload ); // used for reinjecting when on lock\n\nstat = \"nest: \"+ nest_temp+ \" / msp: \"+ minisplit_temp;\nnode.status({ fill: \"green\", shape: \"dot\", text: stat });\nreturn [lock, nest, minisplit, generic, loop];\n\n\n\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 1240,
        "wires": [
            [
                "28e9c28352f9d7e2"
            ],
            [
                "20df73c7ed9e5d36"
            ],
            [
                "484297fd9a4a2a71"
            ],
            [
                "c54928fea436269a"
            ],
            [
                "e92595fc488a60b1"
            ]
        ],
        "outputLabels": [
            "Nest",
            "MiniSplit",
            "Generic",
            "",
            ""
        ]
    },
    {
        "id": "484297fd9a4a2a71",
        "type": "api-call-service",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "Climate - Office MiniSplit",
        "server": "59355537.b6bb8c",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_temperature",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "climate.esphome_minisplit_office"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2760,
        "y": 1180,
        "wires": [
            [
                "dc4a9e7a35f215d4"
            ]
        ]
    },
    {
        "id": "20df73c7ed9e5d36",
        "type": "api-call-service",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "Climate - Office Nest",
        "server": "59355537.b6bb8c",
        "version": 5,
        "debugenabled": true,
        "domain": "climate",
        "service": "set_temperature",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "climate.b3"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2780,
        "y": 1060,
        "wires": [
            [
                "fa7b9e582a8c3516"
            ]
        ]
    },
    {
        "id": "46ff870ed5946bf7",
        "type": "debug",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "generic input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3010,
        "y": 1280,
        "wires": []
    },
    {
        "id": "dc4a9e7a35f215d4",
        "type": "debug",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "minisplit input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3000,
        "y": 1180,
        "wires": []
    },
    {
        "id": "fa7b9e582a8c3516",
        "type": "debug",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "nest input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2980,
        "y": 1060,
        "wires": []
    },
    {
        "id": "c54928fea436269a",
        "type": "api-call-service",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "Climate - Office Generic",
        "server": "59355537.b6bb8c",
        "version": 5,
        "debugenabled": false,
        "domain": "climate",
        "service": "set_temperature",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "climate.mc_gen_th_office"
        ],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "data"
            }
        ],
        "queue": "none",
        "x": 2810,
        "y": 1280,
        "wires": [
            [
                "46ff870ed5946bf7"
            ]
        ]
    },
    {
        "id": "b7d9c0e39839d391",
        "type": "inject",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "Nudge",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "office_last",
        "payloadType": "flow",
        "x": 1560,
        "y": 1260,
        "wires": [
            [
                "e92595fc488a60b1"
            ]
        ]
    },
    {
        "id": "e92595fc488a60b1",
        "type": "gate",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 1810,
        "y": 1260,
        "wires": [
            [
                "7ea39302956ec4d7"
            ]
        ]
    },
    {
        "id": "7ea39302956ec4d7",
        "type": "delay",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "",
        "pauseType": "rate",
        "timeout": "15",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2020,
        "y": 1260,
        "wires": [
            [
                "a809b2fa8c4ceb08"
            ]
        ]
    },
    {
        "id": "033fd0686cb076fb",
        "type": "comment",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "ESP Module Info",
        "info": "https://github.com/geoffdavis/esphome-mitsubishiheatpump",
        "x": 2780,
        "y": 1140,
        "wires": []
    },
    {
        "id": "a6dd9f12343379cd",
        "type": "comment",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "ESP Module Info",
        "info": "https://github.com/geoffdavis/esphome-mitsubishiheatpump",
        "x": 2780,
        "y": 1020,
        "wires": []
    },
    {
        "id": "96bc10d3c19cfa69",
        "type": "comment",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "ESP Module Info",
        "info": "https://github.com/geoffdavis/esphome-mitsubishiheatpump",
        "x": 2820,
        "y": 1240,
        "wires": []
    },
    {
        "id": "a9d2c5b76e18e528",
        "type": "debug",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2430,
        "y": 1120,
        "wires": []
    },
    {
        "id": "28e9c28352f9d7e2",
        "type": "link out",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "den_router_out",
        "mode": "link",
        "links": [
            "e02684c8adf67bba"
        ],
        "x": 2595,
        "y": 1100,
        "wires": []
    },
    {
        "id": "4727c0ec8548202c",
        "type": "comment",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "",
        "info": "[https://github.com/automatikas/Node-red-Nest-thermostat]()",
        "x": 2260,
        "y": 1180,
        "wires": []
    },
    {
        "id": "1d0142f3767176db",
        "type": "function",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "function 3",
        "func": "var msg2 = {};\n\nmsg2.topic = \"target\";\nmsg2.payload = msg.temp;\n\nreturn msg2;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1200,
        "wires": [
            [
                "b3ff11d19935a2ac"
            ]
        ]
    },
    {
        "id": "82dc24266c9231f8",
        "type": "link in",
        "z": "be3e27186d28303f",
        "name": "Office In",
        "links": [
            "0c8b516670a4a57f",
            "4f61c236c3447fd0",
            "a7a2f5a0bf71de87",
            "9875149c9456a05f",
            "d826acdf1e1ba8f2"
        ],
        "x": 1415,
        "y": 1200,
        "wires": [
            [
                "b63974e2eeb8ae66",
                "1d0142f3767176db"
            ]
        ]
    },
    {
        "id": "aa875eff5aee1f20",
        "type": "poll-state",
        "z": "be3e27186d28303f",
        "g": "885be63c3fc1264b",
        "name": "",
        "server": "59355537.b6bb8c",
        "version": 3,
        "exposeAsEntityConfig": "",
        "updateInterval": "30",
        "updateIntervalType": "num",
        "updateIntervalUnits": "seconds",
        "outputInitially": true,
        "outputOnChanged": false,
        "entityId": "sensor.average_temp_office",
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputs": 1,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "temp_office",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 1050,
        "y": 1280,
        "wires": [
            [
                "b3ff11d19935a2ac"
            ]
        ]
    },
    {
        "id": "eb51dbef655c8d0a",
        "type": "comment",
        "z": "be3e27186d28303f",
        "name": "",
        "info": "",
        "x": 1780,
        "y": 80,
        "wires": []
    },
    {
        "id": "59355537.b6bb8c",
        "type": "server",
        "name": "Home Assistant",
        "addon": true
    },
    {
        "id": "84af4bac6aaf91ab",
        "type": "translator-config",
        "name": "",
        "commandText": "on:true\noff:false\nactive:true\ninactive:false\nopen:true\nclosed:false\nclose:false\n1:true\n0:false\ntrue:true\nfalse:false\nhome:true\nnot_home:false\n"
    },
    {
        "id": "02dc96737b6af964",
        "type": "ui_group",
        "name": "Zone: Den",
        "tab": "b8347ebab3445f66",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6e3f8970e878b45c",
        "type": "ui_group",
        "name": "Zone: Bedroom",
        "tab": "b8347ebab3445f66",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a6249749138f7170",
        "type": "ui_group",
        "name": "Zone: Office",
        "tab": "b8347ebab3445f66",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b8347ebab3445f66",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]
